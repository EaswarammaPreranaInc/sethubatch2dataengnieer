#  Find  outputs (Home  work)
a = {
		print('Hyd') ,
		print('Sec') ,
		print('Cyb')
	}
print(type(a))-------><class 'set'>
print(a)------>{None}
print(len(a))---->1



_ = 25
print(_)---->25
print(type(_))----><class 'int'>
a , _ , c = 10 , 20 , 30
print(a)----->10
print(_)------>20
print(c)------->30
for  _  in  range(5)
	print(_ , 'Hello')---->[0] Hello [1] Hello [2]Hello[3]Hello
[4] hello


a = 25
print(id(a))-------> address of object 25
a = 35
print(id(a))-------> address of object 35



# Find  outputs (Home  work)
a = 25.7
print(id(a))-----> address of object 25.7
print(a)---->25.7
a = 35.6
print(id(a))------>address of object 35.6 
print(a)----------->35.6
b = True
print(id(b))-----> True
b = False
print(id(b))------> false
c = None
print(id(c))------>None
c = None
print(id(c))----> None



#  Find  outputs  (Home  work)
a = 'Hyd'
print(id(a))---------> id of the 'hyd'
a[1] = 'e'
a = 'Sec'
print(id(a))----------> id of the 'sec'
b = (10 , 20 , 15 , 18)
print(id(b))------> id of (10 , 20 , 15 , 18)
b[2] = 19--->error
b = (30 , 40 , 35 , 32)
print(id(b))----------> id of (30 , 40 , 35 , 32)
c = range(5)
print(id(c))----->[0,1,2,3,4]
c[3] = 10----->error
c = range(5)
print(id(c))------->[0,1,2,3,4]




# Find  outputs  (Home  work)
a = 25
b = 25
print(a  is  b)-----> True
c = 'Hyd'
d = 'Hyd'
print(c  is  d)---->True
e = False
f = False
print(e  is  f)----->True
g = range(10)
h = range(10)
print(g  is  h)----->False




#Find  outputs(Home  work)
a = [10 , 20 , 15 , 18]
b = [10 , 20 , 15 , 18]
print(a  is  b)------->False Lists are mutable, and each list is stored as a new object.
c =  {10 : 20, 30 : 40}
d =  {10 : 20, 30 : 40}
print(c  is  d)-------->False Dictionaries are also mutable, and new ones are not reused.
e = (10 , 20 , 15 , 18)
f = (10 , 20 , 15 , 18)
print(e  is  f)-----------> True tuples are immutable, and sometimes Python reuses them.
g = {10 , 20 , 15 , 18}
h = {10 , 20 , 15 , 18}
print(g  is  h)------>False Sets are mutable, and even with same values, new object is create



# Find outputs (Home work)
print(10 + 20)-------->30  
print(10.8 + 20.6)-------->31.4
print(3 + 4j + 5 + 6j)----->(8+10j)
print(True + False)------>1
print('Hyder' + 'abad')----->'Hyderabad'
print('Sankar' + 'Dayal' + 'Sarma')---->'SankarDayalSarma'
print('10' + '20')--------->'1020'
print([10 , 20 , 30] + [1 , 2 , 3])----->[10, 20, 30, 1, 2, 3]
print((25 , 10.8 , 'Hyd') + (3 + 4j , True , None))---->(25, 10.8, 'Hyd', (3+4j), True, None)
print({10 , 20} + {30 , 40})--------->Error – unsupported operand type(s) for +: 'set' and 'set'
print({10 : 'Hyd'} + {20 : 'Sec'})-----------> Error:  – unsupported operand type(s) for +: 'dict' and 'dict'
print(range(4) + range(5))------------->Error: Error – unsupported operand type(s) for +: 'range' and 'range'
print(10 + '20')---------->rror: – unsupported operand type(s) for +: 'int' and 'str'
print([10 , 20 , 30] + 5)--------->Error – can only concatenate list (not "int") to list
print([10 , 20 , 30] + (40 , 50 , 60))------------>Error: – can only concatenate list (not "tuple") to list

# Find outputs (Home work)
print(25 * 3)------> 75 
print(10.8 * 25.6)------>276.48 
print(True * False)--------->1 * 0 = 0
print((3 + 4j) * (5 + 6j))---->-9 + 38j
print(3 + 4j * 5 + 6j)------->3 + 26j
print('25' * 3)----->'252525'
print(3 * '25')--------->'252525'
print('Hyd' * 4)------>'HydHydHydHyd'
print([10 , 20 , 15] * 2)--------->[10, 20, 15, 10, 20, 15]
print((25, 10.8, 'Hyd', True) * 3)---------->(25, 10.8, 'Hyd', True, 25, 10.8, 'Hyd', True, 25, 10.8, 'Hyd', True)
print([10 , 20 , 15] * 3.0)--------->Error: can't multiply sequence by non-int of type 'float'
print({10 , 20 , 15} * 2)-------->Error: unsupported operand type(s) for *: 'set' and 'int'
print({10 : 20 , 30 : 40} * 2)------->Error: unsupported operand type(s) for *: 'dict' and 'int'
print([10] * [20])---------->Error: can't multiply sequence by non-int of type 'list

#  /  operator  demo  program
print(9.0 / 2)------->4.5
print(9 / 2.0)------>4.5
print(9.0 / 2.0)------->4.5
print(9 / 2)  #  4.5
print(10.5 / 2)----->5.25
print(10 / 3)--------->3.333..
print(10 / 2)------>5.0


'''
What  does  /  operator  do  ?  --->  Peforms  division   and  returns  float  quotient
'''


#  //  operator  demo  program
print(9 // 2)  #   prev  integer  of (4.5) = 4
print(9.0 // 2)----->4.0
print(9 // 2.0)--->4.0
print(9.0 // 2.0)---->4.0
print(10.5 // 2)------>5.0
print(10 // 3)------>3
print(10.0 // 3)  #    prev  integer  of  3.33 = 3.0
print(8.5 // 3)-----> 2.0 
print(18 // 4)----> 4
print(-18 // 4)----->-5
print(-(18 // 4))------>-4



# % operator demo program
print(9 % 5)---->4
print(9.0 % 5)---->4.0
print(9 % 5.0)------>4.0
print(9.0 % 5.0)----->0.5
print(10.5 % 2)  #   0.5
print(8.9 % 3)------>2.9


# Find outputs
print(7 / 0)----> fails because denominator is zer
print(7 // 0)---->integer division or modulo by zero
print(7 % 0)------>integer division or modulo by zero


# ** operator demo program
print(3 ** 4)------>81
print(10 ** -2)------>0.01
print(4 ** 3 ** 2)---->262144
print(3 + 4 * 5 - 32 / 2 ** 3)--------->19.0



print(9 >= 5)  #   True :  >  is  satisfied
print(9 >= 9)   #   True :  =  is  satisfied
print(9 >= 12)   #  False :  Both  are  not  satisfied
print(6 <= 8)------->True  → 6 is less than 8
print(6 <= 6)----->True  → Equal values
print(6 <= 4)------->False → 6 is not less than or equal to 4
print(9 != 7)------->True  → 9 is not equal to 7
print(6 == 8)------>False → 6 is not equal to 8
print(True  >  False)------->True
print(3 + 4j == 3 + 4j)------>True
print(3 + 4j == 5 + 6j)------>False
print(3 + 4j != 5 + 6j)------>True  → They are not equal
print(10 == 10.0)----->True  → int and float with same value are considered equal

print(3 + 4j >  3 + 4j)------->Error:




#  Find  outputs  (Home  work)
print('Rama'   >  'Rajesh')  #   True :  'm' > 'j'----> true
print('Rama'  <  'Sita') #  True : 'R' < 'S'------>true
print('Hyd'  ==  'Hyd')--->true
print('Rama'  <=   'Ramana')---->true
print('Rama  Rao'  >=  'Rama')------->true
print('Hyd'  != 'Sec')--------> true
print('HYD'  <   'hyd')--------->true


# Chaining  relational  opeartors  (Home work)
print(10 < 20 < 30)  #   True
print(10 >= 20 < 30)  #   False : 10  is  not  >= 20
print(10 < 20 > 30)false
print(1 < 2 < 3 < 4)---> true
print(1 < 2 > 3 > 1)---> false
print(4 > 3 >= 3 > 2)----> true



#  or  operator  demo program
print(True  or  False) #  True
print(False  or  True) #   True
print(True  or  True) #  True
print(False  or   False)   #  False
print(10  or  20)#  10
print(0   or  20)  #  20
print(-25  or  0)------>-25
print(''  or  35)------->35
print(6j  or  'Hyd')----->6j
print(0.0  or  3 + 4j)-------->(3+4j)
print('Hyd'   or   10.8)----> 'hyd'



# not  operator  demo  program
print(not  True) #   False
print(not  False) #  True
print(not  25)--->false
print(not  0)--------> True
print(not  'Hyd')---->false
print(not  '')-----> true
print(not  -10)----.false
print(not  not  'Hyd')---->true



#  Find   outputs (Home work)
i = 10
i = not  i > 14
print(i)---->True
print(not(6 < 4  or  9 >= 5  and  6 != 6))-----> true


















 
