a =
{
print('Hyd')
print('Sec')
print('Cyb')
}
print(a)
print(len(a))
print(type(a))    # error


a  =  {10 : 'Ramesh' ,  20 : 'Kiran' , 15 : 'Amar' , 18 : 'Sita'}
print('Dictionary  with  print  function')
# print(a)
How  to  print  dictionary  with  print()  function
#print(a)
print('Keys  of  dictionary')
print(a.keys())
How  to  print  each  key  of  dict  'a'
for key in a.keys()
   print(key)
print('Values  of  dictionary')
print(a.values())
How  to  print  each  value  of  dict  'a'
for value in a.values()
    print(value)
print('All  the  tuples  of  dict_items   object')
print(a.items())
How  to  print  each  tuple  of  the  list  in  dict_items  object
for item in a.items()
    print(item)
print('Elements  of  each   tuple')
items =a.items
for key, value in items:
    print(key)
    print(value)
How  to  print  elements  of  each  tuple  in  the  list  of  dict_items  object
items =a.items()
for key ,value in items:
      print(f"{key}:{value}")
print('Keys  and  values  of  dictionary')
print(a.keys())
print(a.values())
How  to  print  each  key  and  corresponding  value  in  dict  'a'
for key , value in a.items():
     print(f"{value}:{key}")


# Anonymous object
_= 25
print(_)
print(type(_))

a, _, b =10,20,30
print(a)   # 10
print(_)   #20
print(b)   #30

for _ in range(5):
     print(_)       #0 
                      1
                      2
                      3
                      4

a = 25
print(id(a))       # address of object a =25
a = 35
print(id(a))               # address of object a =35   because value of a is int - int is immutable





a = 25.7
print(id(a))   # address of a =25.7 
print(a)        #25.7
a = 35.6
print(id(a))    # address of object a=35.6  here a is int value both the a values stored difference address  int object is immutable
print(a)
b = True
print(id(b))         # address of object b 
b = False
print(id(b))    # address of object b here also same like a object  b value is immutable stored different references
c = None
print(id(c))      
c = None
print(id(c))     # here  assign c value same python can store same references




#  Find  outputs  (Home  work)
a = 'Hyd'
print(id(a))      # address of a 
a[1] = 'e'         # string object does not item assignment
a = 'Sec'         
print(id(a))        # address of a ='sec' because string is immutable here same object with different references 
b = (10 , 20 , 15 , 18)
print(id(b))       # address of object tuple
b[2] = 19            # error
b = (30 , 40 , 35 , 32)    
print(id(b))       # address of object b with different reference
c = range(5)
print(id(c))        # address of object c 
c[3] = 10             # error
c = range(5)
print(id(c))     # address of object c with different reference



# Find  outputs  (Home  work)
a = 25
b = 25     # here small value integer objects python same reference to both of them 
print(a  is  b)      #True
c = 'Hyd'
d = 'Hyd'
print(c  is  d)     # True
e = False
f = False
print(e  is  f)          # True
g = range(10)
h = range(10)
print(g  is  h)   # False


a = [10 , 20 , 15 , 18]
b = [10 , 20 , 15 , 18]
print(a  is  b)             # False   (== operator compares value of object , is operator compare references of object)
c =  {10 : 20, 30 : 40}
d =  {10 : 20, 30 : 40}
print(c  is  d)           # False
e = (10 , 20 , 15 , 18)
f = (10 , 20 , 15 , 18)
print(e  is  f)            # False

g = {10 , 20 , 15 , 18}
h = {10 , 20 , 15 , 18}
print(g  is  h)               #False    

#Arthimetic operators

print(10 + 20)                 # 30
print(10.8 + 20.6)             #31.4000
print(3 + 4j + 5 + 6j)         #8+10j
print(True + False)            #1
print('Hyder' + 'abad')        #'Hyderabad'
print('Sankar' + 'Dayal' + 'Sarma')    # 'shankar Dayal Sarma'
print('10' + '20')          #1020
print([10 , 20 , 30] + [1 , 2 , 3])       # ['10','20',30, 1,2,3] 
print((25 , 10.8 , 'Hyd') + (3 + 4j , True , None))   # (25 ,10.8 ,'Hyd',3+4j ,True,None)
print({10 , 20} + {30 , 40})       # error
print({10 : 'Hyd'} + {20 : 'Sec'})      # error     (two set and dictionary objects can concat with | operator)
print(range(4) + range(5))             #error      
print(10 + '20')        #error
print([10 , 20 , 30] + 5)             # error
print([10 , 20 , 30] + (40 , 50 , 60))   #error    (python supports to concatenate two operands  same type of object)




print(25 * 3)    # 75
print(10.8 * 25.6)    #276.48
print(True * False)    #0   
print((3 + 4j) * (5 + 6j))         # (-9+38j)
print(3 + 4j * 5 + 6j)          #(3+26j)
print('25' * 3)               #252525
print(3 * '25')                 #25252525
print('Hyd' * 4)                #'HydHydHydHyd'
print([10 , 20 , 15] * 2)       #[10 ,20,15,10,20,15]
print((25, 10.8, 'Hyd', True) * 3)   #  (25, 10.8, 'Hyd', True ,25, 10.8, 'Hyd', True ,25, 10.8, 'Hyd', True)
print([10 , 20 , 15] * 3.0)       # error (because second operand should be int)
print({10 , 20 , 15} * 2)        # error (sets are unorderd and unindexed)
print({10 : 20 , 30 : 40} * 2)      #error  (dictionaries  should unique key)
print([10] * [20])             # error second operand should be int


print(9.0 / 2)    #4.5
print(9 / 2.0)    #4.5
print(9.0 / 2.0)   # 4.5
print(9 / 2)  #  4.5
print(10.5 / 2)    #5.25
print(10 / 3)  3.33333
print(10 / 2)    #5.0



print(9 // 2)  #   prev  integer  of (4.5) = 4
print(9.0 // 2)     #4.0
print(9 // 2.0)     #4.0   
print(9.0 // 2.0)    #4.0
print(10.5 // 2)     #5.0
print(10 // 3)    #3
print(10.0 // 3)  #    prev  integer  of  3.33 = 3.0
print(8.5 // 3)     #2.0
print(18 // 4)       #4
print(-18 // 4)     #-5
print(-(18 // 4))    #-4





print(9 % 5)       #4
print(9.0 % 5)    #4.0
print(9 % 5.0)     #4.0
print(9.0 % 5.0)    #4.0
print(10.5 % 2)  #   0.5
print(8.9 % 3)    #2.9000

print(7 / 0)    #error
print(7 // 0)   #error
print(7 % 0)   #error

print(3 ** 4)    #12
print(10 ** -2)   # 0.01
print(4 * 3 * 2)   # 24
print(3 + 4 * 5 - 32 / 2 ** 3)   #19.0


#  Relational  operators  demo  program
print(9 >= 5)  #   True :  >  is  satisfied
print(9 >= 9)   #   True :  =  is  satisfied
print(9 >= 12)   #  False :  Both  are  not  satisfied
print(6 <= 8)    #  True
print(6 <= 6)    # True
print(6 <= 4)      # False
print(9 != 7)      # True
print(6 == 8)       # False
print(True  >  False)       # True
print(3 + 4j == 3 + 4j)       #True
print(3 + 4j == 5 + 6j)     #  Fasle
print(3 + 4j != 5 + 6j)     # True
print(10 == 10.0)         # True
print(3 + 4j >  3 + 4j)       # error



print('Rama'   >  'Rajesh')  #   True :  'm' > 'j'
print('Rama'  <  'Sita') #  True : 'R' < 'S'
print('Hyd'  ==  'Hyd')      # True : both are equal
print('Rama'  <=   'Ramana')     # True : space < n
print('Rama  Rao'  >=  'Rama')    # True : space > empty string
print('Hyd'  != 'Sec')       # True
print('HYD'  <   'hyd')   # True


# Chaining  relational  opeartors  (Home work)
print(10 < 20 < 30)  #   True
print(10 >= 20 < 30)  #   False : 10  is  not  >= 20
print(10 < 20 > 30)  # False
print(1 < 2 < 3 < 4)   # True
print(1 < 2 > 3 > 1)    # False
print(4 > 3 >= 3 > 2)  #True
  



#  or  operator  demo program
print(True  or  False) #  True
print(False  or  True) #   True
print(True  or  True) #  True
print(False  or   False)   #  False
print(10  or  20)#  10
print(0   or  20)  #  20
print(-25  or  0)      # -25
print(''  or  35)      #35
print(6j  or  'Hyd')     # 6j
print(0.0  or  3 + 4j)      # 3+4j
print('Hyd'   or   10.8)       # Hyd


# not  operator  demo  program
print(not  True) #   False
print(not  False) #  True
print(not  25)       # False
print(not  0)      #True
print(not  'Hyd')   #  False
print(not  '')      #  True
print(not  -10)     # False
print(not  not  'Hyd')  # True





i = 10
i = not  i > 14
print(i)                # True
print(not(6 < 4  or  9 >= 5  and  6 != 6))   # True














  































 




































