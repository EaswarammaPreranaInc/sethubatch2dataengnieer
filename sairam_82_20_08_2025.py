# -*- coding: utf-8 -*-
"""sairam_82_20.08.2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19cCpvT2VVry-nuZEjIfqjjLzYnCFIw7Y
"""

#1 program  to  create  a  list  with  cubes  of  2 , 4 , 6 , 8 , 10  with  list comprehension (Home  work)
numbers = eval(input("Enter a list of numbers : "))
cubes = [x**3 for x in numbers]

print("Cubes:", cubes)

#2 program  to  extract  1st  character  of  each  string  in  capital  letters  in  a  list  of  srings  without  comprehension
input_list = eval(input("Enter a list of strings : "))

result = []
for word in input_list:
    first_char = word[0].upper()
    result.append(first_char)

print(result)

#3 Repeat   previous  program  with  comprehension
input_list = eval(input("Enter a list of strings : "))\
result = [word[0].upper() for word in input_list]
print(result)

#4 program  to  append  each  word  of  the  sentence  and  its  length  to  a  list
sentence = input("Enter a sentence: ")\
words = sentence.split()

result = []
for word in words:
    result.append([word.upper(), len(word)])

print(result)

#5 Repeat   previous  program  with  comprehension

sentence = input("Enter a sentence: ")
result = [[word.upper(), len(word)] for word in sentence.split()]
print(result)

#6 program  to  add  two  lists  of  unequal  length  without  comprehension

a = eval(input("Enter first list of numbers   : "))
b = eval(input("Enter second list of numbers  : "))
result = []
min_length = min(len(a), len(b))
for i in range(min_length):
    result.append(a[i] + b[i])
print(result)

#7 Repeat   previous  program  with  comprehension

a = eval(input("Enter first list of numbers   : "))
b = eval(input("Enter second list of numbers  : "))
min_length = min(len(a), len(b))
result = [a[i] + b[i] for i in range(min_length)]
print(result)

#8 program  to  initialize  a  nested  list  with  zeroes  without  comprehension

rows = int(input("Enter number of rows: "))
cols = int(input("Enter number of columns: "))
nested_list = [[0] * cols for _ in range(rows)]
print(nested_list)

#9 Repeat   previous  program  with  comprehension

rows = int(input("Enter number of rows: "))
cols = int(input("Enter number of columns: "))
nested_list = [[0] * cols for _ in range(rows)]
print(nested_list)

#10 program  to  extract  those  elements  of  1st  list  which  are  not  in  2nd  list   without  comprehension

a = eval(input("Enter first list of numbers     : "))
b = eval(input("Enter second list of numbers    : "))
result = []
for item in a:
    if item not in b:
        result.append(item)
print(result)

#11 Repeat   previous  program  with  comprehension
a = eval(input("Enter first list of numbers    : "))
b = eval(input("Enter second list of numbers   : "))
result = [item for item in a if item not in b]
print(result)

#12 program  to  print  even  numbers  between  1  and  20  with  comprehension
start = int(input("Enter the start of the range: "))
end = int(input("Enter the end of the range: "))
even_numbers = [x for x in range(start, end + 1) if x % 2 == 0]
print(even_numbers)

#13 Repeat  previous  program  with  comprehension  and  without  using  if
start = int(input("Enter the start of the range: "))
end = int(input("Enter the end of the range: "))
start_even = start + (start % 2)
even_numbers = [x for x in range(start_even, end + 1, 2)]
print(even_numbers)

#14 program  to  print  those  squares  of  1 , 2 , 3 , 4 , ... 20  which  are  divisible   by  2  with  comprehension
start = int(input("Enter the start of the range: "))
end = int(input("Enter the end of the range: "))
result = [x**2 for x in range(start, end + 1) if (x**2) % 2 == 0]
print(result)

#15 Repeat  previous  program  with  comprehension  and  without  using  if
start = int(input("Enter the start of the range: "))
end = int(input("Enter the end of the range: "))
start_even = start + (start % 2)
result = [x**2 for x in range(start_even, end + 1, 2)]
print(result)

#16  program  to  add  each  element  of  1st  list  with  all  the  elements  of  2nd  list  without  comprehension
a = eval(input("Enter first list of numbers     : "))
b = eval(input("Enter second list of numbers    : "))
result = []
for x in a:
    for y in b:
        result.append(x + y)
print(result)

#17 Repeat   previous  program  with  comprehension

a = eval(input("Enter first list of numbers     : "))
b = eval(input("Enter second list of numbers    : "))
result = []
for x in a:
    for y in b:
        result.append(x + y)
print(result)

#18 program  to  concatenate  each  character  of  1st  string  with  every  character  of   2nd  string  with  comprehension
str1 = input("Enter the first string: ")
str2 = input("Enter the second string: ")
result = [c1 + c2 for c1 in str1 for c2 in str2]
print(result)

#19 program  to  convert  a  nested  list  to  list  without  comprehension

nested_list = eval(input("Enter a nested list  : "))
flat_list = []
for sublist in nested_list:
    for item in sublist:
        flat_list.append(item)
print(flat_list)

#20 program  to  convert  a  nested  list  to  list  with  comprehension

nested_list = eval(input("Enter a nested list : "))
flat_list = [item for sublist in nested_list for item in sublist]
print(flat_list)

#21 Find  outputs (Home  work)
a = [[10 , 20] , [30 , 40 , 50] , [60 , 70 , 80 , 90]]
b = [ x  for  x  in  a  for  y in x]
print(b)                 #[[10, 20], [10, 20], [30, 40, 50], [30, 40, 50], [30, 40, 50], [60, 70, 80, 90], [60, 70, 80, 90], [60, 70, 80, 90], [60, 70, 80, 90]]

#22 Nested  comprehension  demo  program (Home  work)
a = [ [ j  for   j  in   range(i)]   for   i   in   range(5)]
print(a)         #[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3]]

#23
'''
Most  tricky  program
Input :   List  of  strings
              Eg: ['Swathi' , 'Anand' , 'Srinivas' , 'Zebra' , 'King' , 'Amar' ]
Output :  Nested  list
		        i.e.  [['Swathi' , 'Srinivas'] , ['Anand' , 'Amar'] , ['Zebra'] , ['King']]

Hint: Do  not  sort  the  lists

'''

strings = eval(input("Enter a list of strings : "))
result = []
first_letters = []
for word in strings:
    first_char = word[0]
    if first_char in first_letters:
        index = first_letters.index(first_char)
        result[index].append(word)
    else:
        first_letters.append(first_char)
        result.append([word])
print(result)

#24 Write  a  program  to  merge  two  sorted  lists  to  produce  another  sorted  list

a = eval(input("Enter first sorted list   : "))
b = eval(input("Enter second sorted list  : "))
c = []
i, j = 0, 0
while i < len(a) or j < len(b):
    if i == len(a):
        c.append(b[j])
        j += 1
    elif j == len(b):
        c.append(a[i])
        i += 1
    elif a[i] <= b[j]:
        c.append(a[i])
        i += 1
    else:
        c.append(b[j])
        j += 1
print(c)

#25 program  to  determine  n-th  largest  element   of   a   list
lst = eval(input("Enter a list of numbers  : "))
n = int(input("Enter n : "))
sorted_list = sorted(lst, reverse=True)
nth_largest = sorted_list[n-1]
print(nth_largest)

#26 Write  a  program  to  sort a  list  without  using  sorted()  function  and  sort()  method

lst = eval(input("Enter a list of numbers : "))
n = len(lst)
for i in range(n):
    for j in range(0, n - i - 1):
        if lst[j] > lst[j + 1]:
            lst[j], lst[j + 1] = lst[j + 1], lst[j]
print(lst)