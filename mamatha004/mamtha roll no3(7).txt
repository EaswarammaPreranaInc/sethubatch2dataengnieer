17/7/2025


a = range(10, 50, 5)# Create a range with start=10, stop=50, step=5


print(type(a))# Print the type of 'a'
 
# Output: <class 'range'>

print(a)# Print the range object 
# Output: range(10, 50, 5)

print(*a)# Unpack and print elements of 'a'
 
# Output: 10 15 20 25 30 35 40 45

print(id(a))# Print memory address of 'a'
 
# Output: 138750634712288

print(len(a))# Print number of elements in 'a'
 
# Output: 8

print(*a[2:7], sep=' , ')# Print elements from index 2 to 6 with separator

# Output: 20 , 25 , 30 , 35 , 40

print(*a[::-1])# Print elements of 'a' in reverse order
 
# Output: 45 40 35 30 25 20 15 10

a[4] = 32# Attempt to assign a value to 'a' (will raise an error)
 
# Output: TypeError: 'range' object does not support item assignment

print(a * 2) # Print 'a' repeated (shows range object)

# Output: <range object>
a = range(10, 20)# range from 10 to 19
print(*a, sep=',')  
# Output: 10,11,12,13,14,15,16,17,18,19

b = range(5)# range from 0 to 4
print(*b)  
# Output: 0 1 2 3 4

c = range(10, 1, -1)# range from 10 to 2 in descending order
print(*c, sep='...')  
# Output: 10...9...8...7...6...5...4...3...2...1

d = range(-10, 0)# range from -10 to -1 in ascending order

print(*d)  
# Output: -10 -9 -8 -7 -6 -5 -4 -3 -2 -1

e = range(-10)# empty range
print(*e)  
# Output: (no output, as the range is empty)

f = range(2, 2)# empty range(no value)since start equals end
print(*f)  
# Output: (no output, as the range is empty)

g = range(10, 11, 0.1)#error(range does not support float)

h = range('A', 'F')#Error
r = range(10, 17, 3)# Initialize range from 10 to 17 with a step of 3
a, b, c = r  # Unpacking the range into three variables
# a = 10, b = 13, c = 16
print(a, b, c)  # Output: 10 13 16
r = range(3)# Initialize a new range from 0 to 2
 x, y = r  #Error
p, q, r, s = r  #Error
a, b, c = *r  # a = 0, b = 1, c = 2


18/7/2025


a = [25, 10.8, 'Hyd', True, 3 + 4j, None, 'Hyd', 25] 
print(a)                      # Print entire list
print(*a)                     # Print list elements without brackets
print(type(a))                # Print type of 'a'
print(id(a))                  # Print memory address of list
print(len(a))                 # Print number of elements in list
a[2] = 'Sec'                  # Update 3rd element to 'Sec'
print(a)                      # Print updated list
print(a[2 : 5])               # Print slice from index 2 to 4

a = []                     
print(a)                   # Print empty list
a.append(25)               # Add integer 25
a.append(10.8)             # Add float 10.8
a.append('Hyd')            # Add string 'Hyd'
a.append(True)             # Add boolean True
print(a)                   # Print list after appending
a.remove('Hyd')            # Remove 'Hyd' from list
print(a)                   # Print list after removal
a.remove('25')             # Error: '25' (string) not in list
print(a)                   # Won't execute if error occurs

a = [25, 10.8, 'Hyd']      
print(a)                    # Print list a
print(id(a))                # Print memory address of list
print(a * 3)                # Repeat list 3 times
print(a * 2)                # Repeat list 2 times
print(a * 1)                # Same as original list
print(a * 0)                # Empty list (multiplied by 0)
print(a * -1)               # Empty list (negative times)
print(a * 4.0)              # Error: can't multiply by float
a = a * 3                   # Update 'a' with repeated list
print(a)                    # Print updated list
print(id(a))                # Print new memory address
a = [25]                    # New list with one item
print(a * a)                # Error: can't multiply list by list

a = list('Hyd')            
print(a)                     # Print list: ['H', 'y', 'd']
print(type(a))               # Print type: <class 'list'>
print(len(a))                # Print length: 3

b = (10, 20, 15, 18)         # Tuple with integers
print(list(b))               # Convert tuple to list

print(list(range(5)))        # Convert range(0â€“4) to list

print(list(25))              # Error: int is not iterable

a = {25, 10.8, 'Hyd', True, 3+4j, None, 25, 'Hyd'}  print(a)                     # Print elements (unordered)
print(type(a))               # Print type: <class 'set'>
print(len(a))                # Print number of unique elements

print(a[2])                  #  Error: set is unordered, no indexing
print(a[1:4])                #  Error: set doesn't support slicing

a[2] = 'Sec'                 # Error: set items can't be changed (immutable elements)

print(a * 2)                 # Error: set can't be multiplied

print(a * a)                 #  Error: unsupported operation for sets

#        0      1          2         3         4        5        6        7
list = [25 , 10.8 , 3+4j , 'Hyd' , True , None , 10.8 , 'Hyd']
#       -8    -7        -6       -5       -4     -3      -2      -1

print(list[2:7])            # From index 2 to 6
print(list[::])             # Full list (default step 1)
print(list[:])              # Same as above: full list
print(list[::-1])           # Reverse list
print(list[::2])            # Every 2nd item from start
print(list[1::2])           # Every 2nd item from index 1
print(list[::-2])           # Reverse, every 2nd item
print(list[-2::-2])         # From -2 backwards with step -2
print(list[1:4])            # Index 1 to 3
print(list[-4:-1])          # Index -4 to -2
print(list[3:-3])           # Index 3 to 4
print(list[2:-5])           # Index 2 to 2 (only one item)
print(list[-1:-5])          # Empty (invalid reverse slice without step)

#        0       1       2        3        4       5        6       7
list = [25,   10.8,   3+4j,   'Hyd',   True,   None,   10.8,   'Hyd']

x, y = list[3:5]            # Slice gives ['Hyd', True]  x='Hyd', y=True
print('x :', x)             # Print x value
print('y :', y)             # Print y value

for x in list[2:7]:         # Loop through elements index 2 to 6
    print(x)                # Print each element in the slice

#     0     1     2     3     4
a = [10,  20,  30,  40,  50]     
print(a, id(a))                  # Print list and its memory ID

a[1:4] = [60, 70]                # Replace index 1 to 3 with 2 values
print(a, id(a))                  # Updated list, same memory ID

a[2:4] = [100, 200, 300]         # Replace index 2 to 3 with 3 values
print(a, id(a))                  # Final list, same memory ID

a = (25)              # Not a tuple, just an integer in parentheses
b = 25,               # Tuple with one element (using comma)
c = 25                # Integer
d = (25,)             # Tuple with one element (using parentheses + comma)

print(type(a))        # int
print(type(b))        # tuple
print(type(c))        # int
print(type(d))        # tuple

print(a * 4)          # 25 * 4 we get 100
print(b * 4)          # (25,) * 4 we get (25, 25, 25, 25)
print(c * 4)          # 25 * 4 we get 100
print(d * 4)          # (25,) * 4 we get(25, 25, 25, 25)

a = {1, 'Hyd', False, True, 0.0, '', 1.0, 0}  
# Set with mixed types, but some values are treated as equal:
# 1 = True, 0 = False, 0.0 = 0, 1.0 = 1  duplicates removed

print(a)                   # Print  values in set
print(len(a))              # Length after removing duplicates
print(type(a))             # Print type <class 'set'>

a = set('Rama rAo')                
print(a)                             #  chars in any order
print(len(a))                        # Print count of  characters

print(set([10, 20, 15, 20]))         # List to set (removes duplicates)

print(set((25, 10.8, 'Hyd', 10.8)))  # Tuple to set (removes duplicates)

print(set(range(10, 20, 3)))         # Range to set {10, 13, 16, 19}

print(set(25))                       #  Error

print(set([25, 10.8, [], 'Hyd']))    # Error: list inside list

a = set()                   # Create empty set

a.add(25)                   # Add integer
a.add(10.8)                 # Add float
a.add('Hyd')                # Add string
a.add(True)                 # True = 1, so duplicates 25
a.add(None)                 # Add None
a.add('Hyd')                # Duplicate  ignored
a.add(1)                    # 1 = True , duplicate, ignored

print(a)                    # Print set with unique, hashable values
print(len(a))               # Print number of  elements

a.remove(25)                # Removes 25 (or True, treated as same)

print(a)

a.append(100)               #  Error:set object has no attribute append

a.add(set())                #  Error: set
a.add(())                   # Tuple 
a.add([])                   #  Error: list

print(a)

a.add({})                   #  Error:dict

19\7\2025

a = {10: 'Ramesh', 20: 'Kiran', 15: 'Amar', 18: 'Sita'}

print(a)# Print the dictionary
  # Show entire dictionary

print(type(a))# Print the type of a  # Output: <class 'dict'>
print(a[10])  # Get value for key 10
print(a[20])  # Get value for key 20
print(a[15])  # Get value for key 15
print(a[18])  # Get value for key 18
print(a[19])  # KeyError: 19 not in dictionary
print(a[0])   # KeyError: 0 not in dictionary
print(a['Amar'])  # KeyError: 'Amar' is a value, not a key
a[15] = 'Krishna'  # Change 'Amar' to 'Krishna'
a.pop(20)  # Deletes key 20 and its value
a[25] = 'Vamsi'  # Append new item to dictionary
print(a)  # Show updated dictionary
print(len(a))  # Total items in dictionary
print(a * 2)  # Error

a = {10: 'Hyd', 10: 'Sec'}  # Last value for duplicate key 10 will be kept 'sec'
print(a)# Print dictionary 'a'
  {10: 'Sec'}
print(len(a))# Print number of items in 'a'
  ,1
b = {'R': 'Red', 'G': 'Green', 'B': 'Blue', 'Y': 'Yellow', 'G': 'Gray', 'B': 'Black'}
# Last value for duplicate keys 'G' and 'B' 
print(b)# Print dictionary 'b'{'R': 'Red', 'G': 'Gray', 'B': 'Black', 'Y': 'Yellow'}
print(len(b))# Print number of items in 'b'
  4


a = {[]: 25}  # Error
b = {(): 25}  # Valid dictionary with empty tuple key
print(b)  # {(): 25}
c = {{ }: 25}  # Error
d = {'Ramesh': [9948250500, 9848565090, 9440250404]}
print(d)  # Output: {'Ramesh': [9948250500, 9848565090, 9440250404]}
print(len(d))  # 1 (only one key)
e = {set(): 10.8}  #Error

a = {}
print(type(a))   # <class 'dict'> 'a' is a dictionary
print(len(a)) #  0,no elements
print(a)   # {}  empty dictionary
b = dict()
print(type(b))  # <class 'dict'> 'b' is also a dictionary
print(len(b))    # 0 ,no elements
print(b)         # {} empty dictionary

a = {True: 'Yes', 1: 'No', 1.0: 'May be'}
#  True, 1, and 1.0 are all equal {'True',1,'No','may be'}
print(a) # {True: 'May be'}  only one key remains
print(len(a)) # 1,only one unique key (True)

21/7/2025

# Find outputs (Home work)
a = {
    print('Hyd'),   # Prints 'Hyd' 
    print('Sec'),   # Prints 'Sec' 
    print('Cyb')    # Prints 'Cyb'
}
print(type(a))     #  <class 'set'>
print(a)           #  {None}
print(len(a))      # Prints: 1 (since all elements are None, only one unique element)

# Anonymous object demo program

_ = 25
print(_)           # Prints 25
print(type(_))     # Prints <class 'int'>

a, _, c = 10, 20, 30
print(a)           # Prints 10
print(_)           # Prints 20 (from the tuple unpacking )
print(c)           # Prints 30

for _ in range(5):
    print(_, 'Hello')   # Prints numbers 0 to 4 with 'Hello'


# Find outputs (Home work)

a = 25.7             # Assign float 25.7 to a
print(id(a))         # Print memory ID of 25.7
print(a)             # Print value of a

a = 35.6             # Reassign float 35.6 to a
print(id(a))         # Print new memory ID of 35.6
print(a)             # Print new value of a

b = True             # Assign boolean True to b
print(id(b))         # Print memory ID of True

b = False            # Reassign boolean False to b
print(id(b))         # Print memory ID of False

c = None             # Assign None to c
print(id(c))         # Print memory ID of None

c = None             # Reassign None to c (same value)
print(id(c))         # Same memory ID as above

# Find outputs (Home work)

a = 'Hyd'             # Assign string to a
print(id(a))          # Print memory ID of string 'Hyd'

a[1] = 'e'            # Error

a = 'Sec'             # Assign new string to a
print(id(a))          # Print memory ID of 'Sec'

b = (10, 20, 15, 18)  # Assign tuple to b
print(id(b))          # Print memory ID of tuple

b[2] = 19             #  Error

b = (30, 40, 35, 32)  # Assign new tuple to b
print(id(b))          # Print new memory ID of b

c = range(5)          # Assign range object (0 to 4) to c
print(id(c))          # Print memory ID of range object

c[3] = 10             # Error

c = range(5)          # Reassign same range to c
print(id(c))          # Print memory ID

# Find outputs (Home work)

a = 25.7             # Assign float 25.7 to a
print(id(a))         # Print memory ID of 25.7
print(a)             # Print value of a

a = 35.6             # Reassign float 35.6 to a
print(id(a))         # Print new memory ID of 35.6
print(a)             # Print new value of a

b = True             # Assign boolean True to b
print(id(b))         # Print memory ID of True

b = False            # Reassign boolean False to b
print(id(b))         # Print memory ID of False

c = None             # Assign None to c
print(id(c))         # Print memory ID of None

c = None             # Reassign None to c (same value)
print(id(c))         # Same memory ID as above

# Find outputs (Home work)

print(10 + 20)                          #  30
print(10.8 + 20.6)                      #  31.4
print(3 + 4j + 5 + 6j)                  #  (8+10j)
print(True + False)                    # True=1, False=0 â†’ 1

print('Hyder' + 'abad')                #  'Hyderabad'
print('Sankar' + 'Dayal' + 'Sarma')    # 'SankarDayalSarma'
print('10' + '20')                     #  '1020'

print([10, 20, 30] + [1, 2, 3])        #  [10, 20, 30, 1, 2, 3]
print((25, 10.8, 'Hyd') + (3+4j, True, None))  # Adds two tuples  

print({10, 20} + {30, 40})             # Error

print({10: 'Hyd'} + {20: 'Sec'})       # Error

print(range(4) + range(5))             # Error

print(10 + '20')                       # Error

print([10, 20, 30] + 5)                #  Error

print([10, 20, 30] + (40, 50, 60))     # Error


# Find outputs (Home work)

a = 25
b = 25
print(a is b)       # True 

c = 'Hyd'
d = 'Hyd'
print(c is d)       # True 

e = False
f = False
print(e is f)       # True 

g = range(10)
h = range(10)
print(g is h)       # False


# Relational operators demo program (Home work)
print(9 >= 5)           # True
print(9 >= 9)           # True
print(9 >= 12)          # False

print(6 <= 8)           # True
print(6 <= 6)           # True
print(6 <= 4)           # False

print(9 != 7)           # True
print(6 == 8)           # False

print(True > False)     # True: 1 > 0 

print(3 + 4j == 3 + 4j) # True
print(3 + 4j == 5 + 6j) # False
print(3 + 4j != 5 + 6j) # True

print(10 == 10.0)       # True

print(3 + 4j > 3 + 4j)  # Error

# // operator demo program - returns floor value (greatest integer â‰¤ result)
print(9 // 2)        #  4
print(9.0 // 2)      #  4.0
print(9 // 2.0)      #  4.0
print(9.0 // 2.0)    #  4.0
print(10.5 // 2)     #  5.0
print(10 // 3)       #  3
print(10.0 // 3)     #  3.0
print(8.5 // 3)      #  2.0
print(18 // 4)       #  â†’ 4
print(-18 // 4)      #  -5
print(-(18 // 4))    #  -4


# Find outputs (Home work)

x = 25  
y = F'{x}'          
print(y)          # 25  
print(type(y))    # <class 'str'>

x = 10.8  
y = F'{x}'          
print(y)          #  10.8  
print(type(y))    #  <class 'str'>

x = [10,20,30,40]  
y = F'{x}'         
print(y)          #  [10, 20, 30, 40]  
print(type(y))    #  <class 'str'>

28/7/2025

if {}:  #  Empty dictionary is treated as False
    print('Hyd')   
    print('Sec')   
    print('Cyb')   
print('Bye')       # Always executes

if():  # Empty tuple () is treated as False
    print('Hyd')   
    print('Sec')   
    print('Cyb')   
else:  # Will execute since if condition is False
    print('One')   #  One
    print('Two')   #  Two
    print('Three') # Three
print('Bye')       #  bye

# Write  a  program  to  determine  a  number  is  even  or  odd  with   if  statement              num = int(input("Enter a number: "))

if num % 2 == 0:
    print("The number is Even")
else:
    print("The number is Odd")
if ():  # False (empty tuple)
    print('One')
    print('Two')
    print('Three')
elif []:  # False (empty list)
    print('Four')
    print('Five')
    print('Six')
elif {}:  # False (empty dictionary)
    print('Seven')
    print('Eight')
    print('Nine')
else:  # All above are false, so this runs
    print('Hyd')
    print('Sec')
    print('Cyb')

print('Bye')  # Always runs


if  { }:      #error: empty dictionary (False)
{
    print('One')
    print('Two')
    print('Three')
}
else:
{
    print('Four')
    print('Five')
    print('Six')
}
print('Bye')

if (10, 20, 15):  
print('Hyd')  #error: indented
else:
print('Sec')  # error: indented

# Identify  error
else:#else can't be used without a matching if ,for
		print('else  suite')
print('Outside') give me comments line for the error

'''
Write  a  program  to  add ,  subtract , multiply  and  divide  two  complex  numbers

First  complex  number   --->  3 + 4j
2nd   complex  number   --->  5 + 6j
# Define the complex numbers
a = 3 + 4j
b = 5 + 6j

print(f"Sum        = {a + b}")
print(f"Difference = {a - b}")
print(f"Product    = {a * b}")
print(f"Division   = {a / b}")

29/7/2025

a = [10, 20, 15, 18]
for i in range(len(a)):
    a[i] += 1
print('a :  ', a)       # a :  [11, 21, 16, 19]

b = [10, 20, 15, 18]
for x in b:
    x += 1              
print('b :  ', b)       # b :  [10, 20, 15, 18]

a = eval(input('Enter 1st list  : '))   
b = eval(input('Enter 2nd list : '))    
c = []
for i in range(len(a)):
    c.append(a[i] + b[i])

print('3rd list (index loop):', c)
c = []
j = 0  
for x in a:
    c.append(x + b[j])
    j += 1

print('3rd list (for-each loop):', c)

for x in ():#emptytuple
    print(x)
    # No output
for x in []:#emptylist
    print(x)
    # No output


for x in {}:#emptydictionary
    print(x)
    # No output


for x in set():#emptyset
    print(x)
    # No output


for x in '':#empty string
    print(x)
    # No output


for x in range(10, 10):#empty(star==end)
    print(x)
    # No output
 for x in range():
      print(x)
    # Error

 for x in (25):
     print(x)
    # Error
for x in (25,):
    print(x)#25

# Loop through dictionary keys
for x in {10: 20, 30: 40, 50: 60}.keys():   # keys() returns: 10, 30, 50
    print(x)

print()  # Just a blank line 


for x in {10: 20, 30: 40, 50: 60}.values():  # values() returns: 20, 40, 60
    print(x)

print()  # Blank line again

for x in {10: 20, 30: 40, 50: 60}.items():   # items() returns: (10,20), (30,40), (50,60)
    print(x)

print()  # Blank line again
for x in {10: 20, 30: 40, 50: 60}:          # same as looping over .keys()
    print(x)

# Loop through dictionary keys
for x in {10: 20, 30: 40, 50: 60}.keys():   # keys() returns: 10, 30, 50
    print(x)

print()  # Just a blank line 


for x in {10: 20, 30: 40, 50: 60}.values():  # values() returns: 20, 40, 60
    print(x)

print()  # Blank line again

for x in {10: 20, 30: 40, 50: 60}.items():   # items() returns: (10,20), (30,40), (50,60)
    print(x)

print()  # Blank line again
for x in {10: 20, 30: 40, 50: 60}:          # same as looping over .keys()
    print(x)

# Find  outputs  (Home  work)
How  to  print  each  element  of  list  [10 , 20 , 15 , 18]  with  for  loop
print()
How  to  print  each  character  of   string  'Hyd'  with  for  loop
print()
How  to  print  each  element  of   range(5)  with  for  loop                             for i in [10, 20, 15, 18]:    
    print(i)                  
for ch in 'Hyd':             
    print(ch)                
for I in range(5):         

  '''
Write  a  program  to  determine  bill  amount  and  input  is  units

Units                                                      Cost
------------------------------------------------------------
First  100  units(0 - 99)					Rs. 3.00 / unit

Next  100  units(100 - 199)				Rs. 3.50 / unit

Next  200  units(200 - 399)		    	Rs. 4.00 / unit

Next  300  units(400 - 699)				Rs. 4.50 / unit

Above  700  units(>= 700)				Rs. 5.00 / unit
---------------------------------------------------------------
Let  units  be  1200
What  is  the  bill  amount ? --->  100 * 3.00 + 100 * 3.50 + 200 * 4.00 + 300 * 4.50 + 500 * 5.00

Hint:  Use  match  ...  case   but  not  if ... else
units = int(input('Enter units: '))  

match units // 100:
    case 0:
        cost = units * 3.00
    case 1:
        cost = 100 * 3.00 + (units - 100) * 3.50
    case 2 | 3:
        cost = 100 * 3.00 + 100 * 3.50 + (units - 200) * 4.00
    case 4 | 5 | 6:
        cost = 100 * 3.00 + 100 * 3.50 + 200 * 4.00 + (units - 400) * 4.50
    case _:
        cost = 100 * 3.00 + 100 * 3.50 + 200 * 4.00 + 300 * 4.50 + (units - 700) * 5.00

print("Bill Amount: Rs.", cost)

'''
Write  a  program  to  print  fibonacci  series  upto   x

Let  input  be   10
What  are  the  outputs  ?  --->   0 , 1 ,  1 , 2 ,  3 ,5 , 8


1) What  is  the  formula  for  10th  term ?  ---> 9th  term + 8th  term
    What  is  the  formula  for   3rd  term ?  ---> 	2nd  term + 1st  term
    What  is  the  formual  for  ith  term ?  --->  (i - 1)th  term +  (i - 2)  term

2) What  are  the  first  two  terms ?  --->  0  and  1  (No  formula)

3) Hint:  Use  while  loop
x = int(input("Enter a number: "))  
a = 0
b = 1

print("Fibonacci Series up to", x, "is:")
while a <= x:
    print(a, end=' , ')
    c = a + b        
    a = b            
    b = c

# Find  outputs  (Home  work)
ch = 'B'
match  ch:
	case   'A':
		print('Apple')
	case  'B':
		print('Book') #book
	case  'C':
		print('Cafe')
	case  _:
		print('None of  the  above')
print('Bye')#bye


'''
Write  a  program  to  determine  three  sides  form  a  triangle  or  not

1) Find  area  if  it  is  an  equilateral  triangle
    What  is  an  equilateral  triangle ?  ---> All  the  three  sides  should  be  same
    What  is  the  area  of  equilateral  triangle ?  --->  sqrt(3) / 4 * a ^ 2

2) Find  perimeter  if  it  is  an  isosceles  triangle
    What  is  an  isoscles  triangle ?  ---> Any  two  sides  are  same
    What   is  the  perimeter  of  isoscles  triangle ?  ---> a + b + c

3) Find  both  if  it  is  scalene  triangle
    What  is  a  scalene  triangle ?  ---> All  the  three  sides  are  different
    What  is  the  area  of  scalene  triangle ?  ---> sqrt(s * (s - a) * (s - b) * (s - c))
	What  is  the  value  of  's'  ?  --->  	(a + b + c) / 2
    What   is  the  perimeter  of  scalene  triangle ?  --->  a + b + c

4) What  is  the  qualification  of  triangle  ?  --->  Sum  of  every  two  sides  should  be  >  3rd  side

5) Hint: Use  nested  if
import math

a = float(input("Enter side a: "))

b = float(input("Enter side b: "))

c = float(input("Enter side c: "))

if (a + b > c) and (a + c > b) and (b + c > a):

    print("The sides form a triangle.")

    if a == b and b == c:

        print("It is an Equilateral triangle.")

        area = (math.sqrt(3) / 4) * a ** 2

        print("Area =", area)

    elif a == b or a == c or b == c:

        print("It is an Isosceles triangle.")

        perimeter = a + b + c

        print("Perimeter =", perimeter)

    else:

        print("It is a Scalene triangle.")

        perimeter = a + b + c

        s = perimeter / 2

        area = math.sqrt(s * (s - a) * (s - b) * (s - c))

        print("Perimeter =", perimeter)

        print("Area =", area)

else:

    print("The sides do NOT form a triangle.")

'''
Write  a  program  to  determine  largest , smallest  and  middle  of  three  numbers

a = 10
b = 20
c = 7
max =  20
min =  7
mid =  (10 + 20 + 7) - (20 + 7) = 10

1) What  is  the  initial  value  of  max  ?  --->  a

2) Whichever  input >  max,  assign  that  input  to  max

3) What  is  the  initial  value  of  min  ?  --->  'a'

4) Whichever  input  <  min,  assign  that  input  to  min

5) How  to  obtain  middle  number ?  ---> Eliminate  max  and  min  from  a , b , c

6) Hint : Do  not  use  else  in  the  program

a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
c = int(input("Enter third number: "))
max_val = a
min_val = a
if b > max_val:
    max_val = b
if c > max_val:
    max_val = c
if b < min_val:
    min_val = b
if c < min_val:
    min_val = c
mid = a + b + c - max_val - min_val
print("Maximum:", max_val)
print("Minimum:", min_val)
print("Middle :", mid)

'''
Write  a  program  to  test  year  is  leap  year  or  not

1) What  is  leap  year ?  --->  Divisible  by  4  but  not  by  100   (or)  divisble  by  400

2) Are  2016 , 2020 , 2024  leap  years ? --->  Yes  becoz  leap  year  for  every  4  yearrs

3) Are  1700 , 1800 , 1900  leap  years ? --->  No  becoz  no  leap  year  for  every  100  years

4) Are  1600 , 2000 , 2400  leap  years ?  --->  Yes  becoz  leap  year  for  every  400  years

5) Hint:  single  if  with  3  conditions  and  else
year = int(input("Enter a year: "))
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print(year, "is a leap year.")
else:
    print(year, "is not a leap year.")

'''
Write  a  program  to  determine  largest  of  three  numbers  with  if  and  else

Hint:  Write  multiple  conditions

a = float(input("Enter first number: "))
b = float(input("Enter second number: "))
c = float(input("Enter third number: "))

if a >= b and a >= c:
    print("The largest number is:", a)
elif b >= a and b >= c:
    print("The largest number is:", b)
else:
    print("The largest number is:", c)









