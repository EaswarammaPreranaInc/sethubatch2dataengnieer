# homeworks on 29/08/2025 ANSWERESNOTE : POSITIONAL ARGUMENTS SHOULD BE IN ORDERNOTE : KEYWORD ARGUMENTS NEED NOT BE IN ERROR---# Modify  following  program  such  that  every  function  should  be  executeddef  f1(): 	print('No-argument  function')f1(25)def  f1(x): 	print('Single  argument  function  : ' , x)f1(35)def  f1(x , y): 	print('Two  argument  function : ' , x , y)f1(45,65)def  f1(x , y , z): 	print('Three  argument  function : ' , x , y , z)f1(36,52,56)---'''Write  a  program  to  generate  all   prime  numbers  between  2  and  n   andalso  print  how  many  prime  numbers  are  existingHint:  Use  the  prime()  function  defined  in   prog3a(prime).py  but  do  not  rewriteWhat  are  the  outputs  if  input  is  10  ?  --->  Prime   numbers 																	   **2** 																		   **3** 																		   **5** 																		   **7** 																		  **Number  of   prime  numbers : 4**'''How  to  read  a  numberHow  to  print  all  prime  numbers  between  2  and  user  inputprint('Number  of  prime numbers  :  ' ,  ???)n = int(input('enter the number here:'))for i in range(2,n):**if n // 2 ==0:** 		**print('Not Prime')** 		**break**else:**print('Prime Number')**---# Find  outputs  (Home  work)def    f1(a , b , c):          print(F'a  :  {a}    \t  b  :  {b}  \t  c :  {c}')# End  of  the  functionf1(a = 10 , b = 20 , c = 30) # a:10 \t b:20 \t c:30f1(25 , 10.8 , 'Hyd') # a :25 \t b :10.8 \t c:'Hyd'f1(b = 40.7 , a = 50.2 , c = 60.5) # a :50.2 \t b : 40.7 \t c:60.5f1(c = 'Hyd' , b = 'Sec' , a = 'Cyb') # a: 'Cyb' \t  b :'Sec' \t c:'Hyd'f1(c = 3 + 4j , a = True , b = None) # a: 'True' <tab> b :None <tab> c:'Hyd'f1(25 , c = 10.8 , b = 'Hyd') # a : 25 <tab> b:'Hyd' <tab> c:10.8f1(a = 100 , 200 , 300)  #  Error here after key word there is positional argumentf1(True , None , b = 'Hyd') # errorf1(10 , 20 , x = 30) # error here x is not definedf1(10 , 20) # error there are three arguments in the user defined function---# Find  outputs (Home  work)def    disp(empno , ename , sal):        print(F'Emp  Number : {empno:4}  \t  Emp  Name : {ename:15}  \t  Salary : {sal}')# End  of  the  functiondisp(25 , 'Rama Rao' , 10000.0) # Emp Number : 25 <tab> Emp Name : 'Rama Rao' <tab> Salary : 10000.0disp(ename = 'Sita' , sal = 20000.0 , empno = 35) # empno:35 <tab> ename:'Sita' <tab> sal=20000.0x = 'Rama  Rao'y = 30000.0z = 20disp(x , y , z) # empno:'Rama Rao' <tab> ename :30000.0 <tab> z:20---#  Tricky  program [* (unpacking) and ** (keyword unpacking) operators ]# Find  outputs (Home  work)def    f1(a , b , c): 	return  a + b * c#end  of  the  functionprint(f1(3 , 4 , 5)) # 23print(f1(*[6 , 7 , 8])) #62 unpacks keys and assigns values a,b,cprint(f1([6 , 7 , 8])) # error pvm waaiting for the b,c values and there is no  * operatorprint(f1(*{1 : 2 , 3 : 4 , 5 : 6})) # 16print(f1(**{'c' : 2 , 'b' :  4 , 'a' : 6})) #16 it unpacks the dictionary into keyword argumentsprint(f1({'c' : 2 , 'b' :  4 , 'a' : 6})) # type error because it doesnot assigned the b,c valuesprint({**{'c' : 2 , 'b' :  4 , 'a' : 6}}) #{'c': 2, 'b': 4, 'a': 6}print(f1(**{'c' : 2 , 'a' : 4 , 'x' : 6})) # Type error because of x , X is not defined---# Identify  Error (Home  work)a = [10 , 20 , 15 , 5 , 12]print(sorted(reverse = True , a)) #(20,15,12,10,5)print(sorted(a , rev = True)) # error due to rev  # 25 <tab>10.8<tab>'Hyd'print(25 , 10.8 , 'Hyd' , separator = '\t') # type error it should be sepprint(25 , 10.8 , 'Hyd' , endofline = '\t') # type error it should be "end"print(25 ,  sep = '\t' , 10.8 , end = '\t' , 'Hyd') #  error---# Keyword  only   arguments  demo  programdef   f1(* , a , b):        print(F'a  :  {a}  \t  b :  {b}')# End  of  the  functionf1(a = 10 , b = 20) # a:10 , b:20f1(b = 30 , a = 40) # a:40 ,b=30f1(50 , 60) # type error f1(70 , b = 80) #type errorf1(a = 15 , 25) # error ---#Find  outputs (Home  work)def  f1(a , * , b , c):        print(F'a  :  {a}  \t  b :  {b}  \t  c  :  {c} ')# End  of  functionf1(10 , b = 20 , c = 30) # a:10,b:20,c:30f1(a = 40 , b = 50 , c = 60) # a:40,b:50,c:60f1(c = 100 , b = 90 , a = 80) #a:80,b:90,c:100f1(70 , 80 , c = 90) # error due to same arguments assigned to af1(70 , 80 , 90) # errorf1(c = 15 , b = 25 , 35) # error---# Identify error (Home  work)def   f1(a  , b , *):# here after the star there is no args         pass---#  Positional  only  arguments  demo  programdef   f1(a , b , /):        print(F'a  :  {a}  \t  b  :  {b}')# End  of   the  functionf1(10 , 20) # a:10 ,b:20f1(a = 30 ,  b = 40) # type error because there is / in the arguments f1(50 , b = 60) # type errorf1(a = 70 , 80) # error---# Find  outputs (Home  work)def  f1(a , b , / , c):        print(F'a  :  {a}  \t  b :  {b}  \t  c  :  {c} ')# End  of  functionf1(10 , 20 , 30) # a:10 ,b:20 , c :30 f1(40 , 50 , c = 60) # a:40 ,b:50,c=60f1(a = 70 , b = 80 , c = 90) # error a and b are positional arguments and here we used keyword arguments f1(a = 100 , b = 110 , 120) # error PA is not used after KAf1(a = 130 , 140 , c = 150) # error PA is not used after KAf1(160 , b = 170 , 180) # error PA is not used after KAf1(190 , b = 200 , c = 210) # error PA is not used after KA---# Find outputs(Home  work)def  f1(a , b , / , c , d , * , e  , f):        print(F'a  :  {a}  \t  b  :  {b}  \t  c  :  {c}  \t  d  :  {d}  \t  e  :  {e}  \t  f  :  {f}')# End of the functionf1(10 , 20 , 30 , d = 40 , e = 50 , f = 60) # a:10 ,b:20,c:30,d:40,e:50,f:60f1(1 , b = 2 , c = 3 , d = 4 , e = 5 , f = 6) # ERROR BECAUSE B IS PA , WE CALLED HERE AS KAf1(1 , 2 , 3 , 4 , 5 , f = 6) # ERROR BECAUSE E IS PA BUT IT INCLUDED AS KAf1(10 , 20 , c = 30 , 40 , e = 50 , f = 60) # error there are in between PA after KAf1(10 , 20 , 30 , 40 , e = 50 , f = 60) ## a:10 ,b:20,c:30,d:40,e:50,f:60---# Identify error (Home  work)def  f1(/ , a , b ,  c): # ERROR        passdef   f2(a , b , c , *): # ERROR        pass---# Identify  error  (Home  work)def  f4(* , a , b , c , /): # HERE PA ARE AFTER KA 	        pass---# Find  outputs  (Home  work)def  f1(x): 	print('1st  function : ' , x)def  f1(y): 	print('2nd  function : ' , y)def  f1(z): 	print('3rd  function : ' , z)f1(z = 10) #10 f1(y = 20) # NOT CALLED f1(x = 30) # NOT CALLED ---# Default  arguments  demo  programdef   add(a  , b = 20 , c = 30):        return   a + b + c#end  of  the  functiomprint(add(100)) # 150print(add(100 , 200)) # 330print(add(100 , 200 , 300)) # 600print(add(100 , c = 200)) # 330print(add(c = 100 , b = 200 , a = 300)) # 600print(add(c = 100 , a = 200)) # 320print(add()) # ERRORprint(add(a = 100 , 200)) # ERROR A PA CANT FOLLOW THE KAprint(add(100 ,  , 300)) # ERRORprint(add(100 ,  b , 300)) # ERROR---# Identify  Errordef   f1(a = 10 ,  b ,  c = 20 ,  d): # ERROR SYNTAX 	passdef   f2(b , d , a = 10 , c = 20): # ERROR PS CANT FOLLOW THE KA 	pass---#  Find  outputs (Home  work)def   f1(a = 10):        print(a)# End  of  the  functionf1(20) # 20 f1() # 10 BECUASE IT HAS A DEFAULT VALUE IN THE HEADER DEFINED FUNCTIONf1(a = 30) # 30---# Find  outputs (Home  work)def  add(a , b , c = 10 , d = 20):        return  a + b + c + d# End  of  the  functionprint(add(100 , 200)) # 330print(add(100 , 200 , 300)) # 620print(add(100 , 200 , 300 , 400)) # 1000print(add(b = 100 , a = 200)) # 330print(add(100 , 200 , d = 300)) # 610print(add(d = 100 , a = 200 , b = 300)) # 610print(add(c = 100 , d = 200 , 300 , 400)) # ERRORprint(add(100 , 200 , c = 300 , x = 400)) # ERROR X IS NOT DEFINED print(add()) # ERROR---#  Find  outputs (Home  work)def    f1(x = 25):        return  xdef   f2(x):        return  x# End  of  the  functionprint(f1(10)) # 10print(f1()) # 25print(f2(20)) #20print(f2()) # TYPE ERROR IT NOT HAVING DEFAULT VALUE---# Find  outputs (Home  work)def   disp(ch = '*' , n = 4):        print(ch *  n)# End of the functiondisp('-' , 6) # ------disp('$') # $$$$disp() #****disp(n = 5) # 20disp(5) #####disp(n = 7 , ch = '%') # %%%%%%%disp(7 , '@') # @@@@@@@disp(7 , n = 6) # 42disp(ch = '!' ,  5) # !!!!!---# Find  outputs (Home  work)def  power(a , b  =  2):        return  a ** b#end of the functionprint(power(2 , 6)) # 64print(power(5)) # 25print(power(b = 3 , a = 4.5)) # 91.125print(power(3 + 4j)) # (-7+24J)print(power(True)) # 1def   power(b = 2 , a): # ERROR A SHOULD COME FIRST  	 pass---# Find outputs  (Home  work)def   add(a , b): 	print('2-argument  function') 	return a + bdef  add(a , b , c): 	print('3-argument  function') 	return a + b + cdef  add(a  = 1 , b  = 2 , c   = 3 , d = 4): 	print('4-argument  function') 	return a + b  + c + d# End  of  the  function# last function will be calledprint(add(10 , 20 , 30 , 40)) # 100print(add(50 , 60 , 70)) # 184print(add(80 , 90)) # 177print(add(100)) # 109print(add()) # 10---# Find outputs  (Home  work)def  disp(a , b):        print('2-argument function  :  ' , a , b)def  disp(a , b , c , d):        print('4-argument  function  :  ' , a , b , c , d)def disp(a , b , c = 25):        print('3-argument  function  :  ' , a , b , c)#enddisp(10 , 20 , 30) # 10 20 30disp(40 , 50 , 60 , 70) # ERRORdisp(80 , 90) # 80 90 25---# Find outputs(Home  work)def   add(* , a = 10 , b = 20):        return  a + b# End of  the  functionprint(add(a = 30 , b = 40)) # 70print(add()) #30print(add(a = 50)) # 70print(add(b = 60 , a = 70)) #130print(add(80 , 90)) # ERROR---# Find  outputs(Home  work)def   add(a = 10 , b , c):        passdef   add( * , a = 10 , b , c ):        return  a + b + c# End  of  the  functionprint(add(a = 30 , b = 40 , c = 50)) #120print(add(b = 60 , c = 70)) # 140print(add(c = 80 , b = 90 , a = 100)) # 270print(add(c = 25 , a = 43)) #TYPE ERRORprint(add(1 , 2 , 3)) # TYPE ERROR def   add(a , b = 10 ,  c ,  * , d  , e = 20 , f): 		pass--------------END------------------------------
