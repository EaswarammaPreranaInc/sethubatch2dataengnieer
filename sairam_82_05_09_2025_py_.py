# -*- coding: utf-8 -*-
"""sairam_82_05.09.2025.py .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eM3E7T8FQKDtV-0Cgyc_iF4WzQ4_lJNT
"""

#1  Find  outputs  (Home  work)
def  change(b):
	b . append(25)
	b[2] = 17
	del  b[1]
# End  of  the  function
a = [10 , 20 , 15 , 18]
print(a) #[10, 20, 15, 18]
change(a)
print(a) #[10, 17, 18, 25]

#2 Find  outputs  (Home  work)
def  change(b):
	b  = [50 , 60 , 70 , 80]
	print(b) #[50, 60, 70, 80]
# End  of  the  function
a = [10 , 20 , 30 , 40]
print(a) #[10, 20, 30, 40]
change(a)
print(a)  #[10, 20, 30, 40]

#3 Find  outputs  (Home  work)
def   f1(x):
	x = 20
	print(x) #20
# End  of   the   function
x = 10
print(x)  #10
f1(x)
print(x) #10

#4  Find  outputs  (Home  work)
def  f1(b):
	b[2] = 25  #Error
#end  of  the  function
a = (10 , 20 , 15 , 18)
print(a) #(10, 20, 15, 18)
f1(a)
print(a)

#5 Find  outputs (Home  work)
square = lambda  x = 10  :   x * x
print(square(5)) #25
print(square())  #100

#6 Find  outputs  (Home  work)
print((lambda   x  :   x * x) (7)) #49
print( lambda   x  :  x * x(7)) #<function <lambda> #Address
print( lambda   x  :   x * x) #<function <lambda> #Address
print( (lambda  x = 25 :  x * x) () ) #625
square = lambda  x :  x  *  x
print(square(5)) #25

#7 Find  output (Home  work)
add = lambda x, y: x + y
print(type(add)) #<class 'function'>
print(add(10 , 20)) #30
print(add(10.6 , 20.8)) #31.4
print(add('Hyder' , 'abad')) #Hyderabad
print(add(True , False)) #1
print(add(25 , 10.8)) #35.8
print(add(3 + 4j , 5 + 6j)) #8+10j
print(add(10 , '20')) #Error
print(add()) #Error
print(add) #<function <lambda>#Address

#8 Find  outputs (Home  work)
add = lambda  a = 1 , b = 2 :  a + b
print(add(10 , 20)) #30
print(add()) #3

#9  Find  outputs (Home work)
print((lambda  x , y : x + y) (10 , 20) ) #30
print((lambda  x , y : x + y) (10.8 , 20.6)) #31.4
print((lambda  x , y : x + y) ('Hyder' , 'abad'))#Hyderabad
print(lambda  x , y : x + y  ('Hyder','abad'))#<function <lambda> #Address

#10  Find  outputs (Home  work)
large = lambda x, y: x if x > y else y
print(large(10  ,  20)) #20
print(large(10.7  ,  5.6)) #10.7
print(large('g'  ,  's')) #s
print(large('Rama'  ,  'Rajesh'))#Rama
print(large(True,False)) #True

#10 Find  outputs (Home  work)
power = lambda  a = 3.5 , b = 2  :  a ** b
print(power(2 , 3)) #8
print(power(4.5 , 4)) #410.0
print(power()) #12.25
print(power(9)) #81

#11 Find  outputs
all = lambda  a , b :  (a + b ,  a - b , a * b , a / b)
x = all(10 , 7)
print(type(x)) #class '<Tuple>'
print(x) #(17, 7, 70, 1.42)
p , q , r , s = all(9 , 2)
print(p) #11
print(q) #7
print(r) #18
print(s) #4.5)

#12  Find  outputs
a  =  lambda  :  'Hyd'
print(a())#Hyd
print(a) #<function <lambda> #Address

#13 Find  outputs
a  =  lambda  :  print('Hyd')  ;  print('Sec');  print('Cyb')
print(a()) #Sec#Cyb#Hyd#None

#14 Find  outputs (Home  work)
a  =  lambda  : 'Hyd' ;  print('Sec') ;  print('Cyb')
print(a()) #Sec #Cyb #Hyd

#15 Find  outputs   (Home  work)
a  =  lambda  :  print('Hyd')  , print('Sec')  , print('Cyb') #Sec #Cyb
print(type(a))  #<class 'tuple'>
print(a)  #(<function<lambda> Address, None, None)
for  x  in  a:
	print(x) # <functio <lambda> address #None #None
a() #Error
print(a[0]()) #Hyd #None

#16  Find  outputs  (Home  work)
s = 'Hyd'
print(lambda  s  :  print(s)) #<function <lambda> #Address
print(lambda  x  :  print(x) (s)) #<function <lambda> #Address
print((lambda  x  :  print(x)) (s)) #Hyd
(lambda  x  :print(x))(s) #Hyd

#17 Find outputs  (Home  work)
x = 5
adder1 = lambda  y , x = x  : x + y
x = 10
adder2 = lambda  y , x = x : x + y
x = 20
print(adder1(100)) #105
print(adder2(200)) #210
print(adder1(300,400)) #700

#18 Find  outputs  (Home  work)
a = [lambda   x  :  x ** 2 , lambda   x  :  x ** 3 ,  lambda   x  :  x ** 4]
for   fun   in   a:
     print(fun(5))   #25 #125 #625

#19  Find  outputs
def   f1():
	print('Hyd') #Hyd
def   f2():
	print('Sec') #Sec
a = [f1 , f2]
for  x  in  a:
	     x()
#a = [def   f1():  print('Hyd') ,  def   f2():  print('Sec')]
print(a) #[<function f1 at address>, <function f2 at address>]

#20 Find output  (Home  work)
a = {'power_2'  :  lambda   x  :  x ** 2 ,
       'power_3'  :  lambda   x  :  x ** 3 ,
  	   'power_4'  :  lambda   x  :  x ** 4}
key = 'power_3'
print(a[key]) # <function <lambda> address>
print(a[key](5)) #125

#21 Find  outputs  (Home  work)
def   f1(x):
        return  lambda  n  :  x ** n
lamb = f1(3)
print(type(f1)) #<class 'function'>
print(type(lamb)) #<class 'function'>
print(lamb(2)) #9
print(lamb(5)) #243
print(lamb) #<function f1.<locals>.<lambda> address>
#print(lamb()) #Error

#22 Find  outputs   (Home  work)
def   eval(a , b , c):
        return   lambda    x  :    a *   x **  2  +   b * x  +  c
lam  = eval(3 , 4 , 5)
print(lam(2)) #25
print(lam(2.5)) #33.75
print(lam(4)) #69

#23 Nested  lambda  function  (Home  work)
add  =  lambda    x = 10   :    lambda   y  :  x  +  y
a = add()
print(a(20)) #30
print(add(30)(40)) #70

#24 Find  outputs
a= ((10 , 'Rama' , 1000.0) , (20 , 'Sita' , 2000.0) , (15 ,'Rajesh' , 500.0) ,  (18 , 'Kiran' , 2800.0) , (5 , 'Amar' , 1300.0))
b = sorted(a)
print(b)  #[(5, 'Amar', 1300.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (20, 'Sita', 2000.0)]
print()
c = sorted(a , reverse = True)
print(c) #[(20, 'Sita', 2000.0), (18, 'Kiran', 2800.0), (15, 'Rajesh', 500.0), (10, 'Rama', 1000.0), (5, 'Amar', 1300.0)]
print()
d = sorted(a ,  key =  lambda   x  :  x[1])
print(d) # [(5, 'Amar', 1300.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (10, 'Rama', 1000.0), (20, 'Sita', 2000.0)]
print()
e = sorted(a , key =  lambda   x  :  x[2])
print(e) #[(15, 'Rajesh', 500.0), (10, 'Rama', 1000.0), (5, 'Amar', 1300.0), (20, 'Sita', 2000.0), (18, 'Kiran', 2800.0)]
print()
f = sorted(a , key = lambda   x  :  x[0])
print(f) #[(5, 'Amar', 1300.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (20, 'Sita', 2000.0)]
print()
g = sorted(a , key = lambda  x : x[1] , reverse = True)
print(g) #[(20, 'Sita', 2000.0), (10, 'Rama', 1000.0), (15, 'Rajesh', 500.0), (18, 'Kiran', 2800.0), (5, 'Amar', 1300.0)]
print(sorted(a,key=x[1])) #Error

#25 Find outputs  (Home  work)
a = [ {'Make' : 'Ford' , 'Model' : 'Focus' , 'Year' : 2013} ,
        {'Make' : 'Tesla' , 'Model' : 'X' , 'Year' : 1999} ,
        {'Make' : 'Mercedes' , 'Model' : 'C350E' , 'Year' : 2008} ]
b = sorted(a , key = lambda  x  :  x['Year'])
print(b) #[{'Make': 'Tesla', 'Model': 'X', 'Year': 1999}, {'Make': 'Mercedes', 'Model': 'C350E', 'Year': 2008}, {'Make': 'Ford', 'Model': 'Focus', 'Year': 2013}]
print(sorted(a)) #Error

#26 Find outputs  (Home  work)
a = ((10 , 'Rama' , 1000.0) , (20 , 'Sita' , 2800.0) , (15 , 'Vamsi' , 2000.0) , (25 , 'Kiran' , 1500.0) ,  (5 , 'Amar' , 1300.0))
print(max(a , key = lambda  x  :  x[0] )) #(25, 'Kiran', 1500.0)
print(max(a , key = lambda  x  :  x[1] )) #(15, 'Vamsi', 2000.0)
print(max(a , key = lambda  x  :  x[2] )) #(20, 'Sita', 2800.0)
print(max(a)) #(25, 'Kiran', 1500.0)

#27 Find  output  (Home  work)
add = lambda  x  :   x == 25
print(add(10)) #False
add = lambda  x = 25 :   x == 35
print(add()) #False
#add = lambda  x  :   x = 25
#add = lambdax:x:=25

'''28
There  are  21  matchsticks.
User  can  pick  1 , 2 , 3  or  4  matchsticks.
Computer  picks  after  user  and  whoever  picks  the  last  matchstick, they  lose  the  game.
Write  a  program  such  that  computer  wins
'''

n = 21
iteration = 1

while n > 1:
    print(f"Iteration {iteration}  User pick (1-4), matchsticks left: {n}")
    user_pick = int(input("Pick 1 to 4 matchsticks: "))
    while user_pick < 1 or user_pick > 4:
        user_pick = int(input("Invalid! Pick a number between 1 and 4: "))
    computer_pick = 5 - user_pick
    n -= (user_pick + computer_pick)
    print(f"User picked: {user_pick}, Computer picked: {computer_pick}, Remaining matchsticks: {n}\n")
    iteration += 1
print("Only 1 matchstick left. You have to pick the last matchstick. You lose!")

#29 program  to  convert  roman number to  arabic  number
def roman_to_arabic(roman):
    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    sum = 0
    prev = 0
    roman_reversed = roman[::-1]
    for char in roman_reversed:
        value = roman_values[char]
        if value >= prev:
            sum += value
            prev = value
        else:
            sum -= value
            prev = value
    return sum
user_input = input("Enter a Roman numeral: ").upper()
try:
    result = roman_to_arabic(user_input)
    print(f"Roman numeral {user_input} converts to Arabic number {result}")
except KeyError:
    print("Invalid Roman numeral entered. Please enter a valid Roman numeral.")