 #  intersection()   method  demo  program (Home  work)


a = {10 , 20 , 30 , 40}
b = {30 , 40 , 50 , 60}

c = a.intersection(b)   
print(c)                # {40, 30}
print(type(c))          # <class 'set'>

d = a & b               # using & operator
print(d)                # {40, 30}
print(type(d))          # <class 'set'>

print(c is d)           # False 
print(c == d)           # True  
'''
intersection()  method
---------------------------
1) What  does  a . intersection(b)  do ?  --->  Returns  a  set  with  common  elements  of  sets   'a'  and  'b'

2) Is  set . intersection(list)  valid  ?  --->
								Yes  becoz  argument  of  intersection()  method  can  be  any  sequence  but  not  necessarily  set

3) What  is  another  way  to  obtain  common  elements ?  --->  a & b

4) Is  set & list  valid ?  --->  No  becoz  operands  of  &  operator  should  be  sets  only

5) Is  list . intersection(set)  valid ?  --->  No  becoz  there  is  no  intersection()  method  in  list  class
'''
 # difference()   method  demo  program  (Home  work)
a = {10 , 20 , 30 , 40}
b = {30 , 40 , 50 , 60}

c = a.difference(b)    
print(c)               # {10, 20}
print(type(c))         # <class 'set'>

d = a - b              
print(d)               # {10, 20}
print(type(d))         # <class 'set'>

print(c is d)          # False 
print(c == d)          # True 


'''
difference()  method
------------------------
1) What  does  a . difference(b)  do ? --->  Returns  a  set  with  those  elements  of  set  'a'  which  are  not  in  'b'

2) Is  set . difference(list)  valid  ?  --->
							Yes  becoz  argument  of  difference()  method  can  be  any  sequence  but  not  necessarily  set

3) What  is  the  alternative  to  a . difference(b) ?  --->  a - b

4) Is  set - list  valid ?  --->  No  becoz  operands  of  -  operator  should  be  sets  only
'''
 # symmetric_difference()   method  demo  program  (Home  work)
a = {10 , 20 , 30 , 40}
b = {30 , 40 , 50 , 60}

c = a.symmetric_difference(b)   
print(c)                        # {10, 20, 50, 60}
print(type(c))                  # <class 'set'>

d = a ^ b                       
print(d)                        # {10, 20, 50, 60}
print(type(d))                  # <class 'set'>

print(c is d)                   # False 
print(c == d)                   # True 


'''
symmetric_difference()  method
---------------------------------------
1) What  does  a . symmetric_difference(b)  do ? --->  Returns  a  set  with  all  the  elements  of  sets   'a'  and  'b'  but
						                                                              without  common  elements
																					  i.e.  Union  -  Intersection

2) Is  set . symmetric_difference(list)  valid  ?  --->  Yes  becoz  argument  can  be  any  sequence  but  not  necessarily  set

3) What  is  the  alternative  to  a . symmetric_difference(b) ?  --->  a ^ b

4) Is  set ^ list  valid ?  --->  No  becoz  operands  of  ^  operator  should  be  sets  only
'''


 # Find  outputs  (Home  work)
a = {x * x  for   x   in   range(10)}
print(a) # {0, 1, 64, 36, 4, 9, 49, 16, 81, 25}
print(type(a)) # <class 'set'>




 '''
(Home  work)
Write  a  program  to  remove  duplicate  characters  of  the  string  using  set

1) Let  input  be   Rama  Rao
    What  is  the  output  ? --->  Ram<space>o

2) Both  input  and  output  are  strings

3) How  to  convert  string  to  set  ?  --->  set(string)
    How  to  convert  set  to  string ?  --->  '' . join(set)

4) What  is  the  result  of  str({'H' , 'y' , 'd'})  ? --->  "{'H' , 'y' , 'd'}"  but  not  'Hyd'
'''



 s = "Rama Rao"
unique_set = set(s)

result = ''.join(unique_set)

print("Result:", result)



'''
Write  a  program  to  remove  duplicate  elements  of   list  using  set

1) Let  input  be  [False , 25 , 10.8 , 1  , 25 , 0 , 'Hyd' ,  10.8 , 1.0 , None , 'Sec' , 'Hyd' , True  ]
    What  is  the  output ?  ---> [False , 25 , 10.8 , 1 , 'Hyd' , None , 'Sec']

2) Both  input  and  output  are  lists
'''


lst = [False, 25, 10.8, 1, 25, 0, 'Hyd', 10.8, 1.0, None, 'Sec', 'Hyd', True]

result = []
seen = set()

for item in lst:
    if item not in seen:
        result.append(item)
        seen.add(item)

print(result)




Enter  list  with  duplicates :  [False , 25 , 10.8 , 1  , 25 , 0 , 'Hyd' ,  10.8 , 1.0 , None , 'Sec' , 'Hyd' , True  ]
List  without  duplicates :   [False, 1, None, 'Sec', 10.8, 25, 'Hyd']



'''
Write  a  program  to   obtain  common  elements  between  two  lists  using  sets

1) Let  1st  list  be  [10 , 20 , 30 , 40 , 50 , 60]  and  2nd  list  be  [30 , 40 , 70 , 80 , 20]
    What  is  the  output ?  --->  [20 , 30 , 40]

2) Both  input  and  output  are  lists
'''



list1 = [10, 20, 30, 40, 50, 60]
list2 = [30, 40, 70, 80, 20]

common = set(list1) & set(list2)   # {20, 30, 40}
result = [x for x in list1 if x in common]

print(result)

          
          
Enter  1st  list  :  [10,20,30,40,50,60]
Enter  2nd  list  :  [30,40,70,80,20]
Common  elements  between  the  2  lists :   [40, 20, 30]

          
          
#  How  to  access  values  of  dictionary (Home  work)
a  =  {'Empno'  :  25 ,  'Ename'  :  'Rama  Rao'  ,  'Sal'  :  1000.65  }
print(How  to  print  value  25  in  dict  'a')
print(How  to  print  'Rama Rao'  in  dict  'a')
print(How  to  print  value  1000.65   in  dict  'a')

          
          
a = {'Empno': 25, 'Ename': 'Rama Rao', 'Sal': 1000.65}
print(a['Empno'])    #  25   
print(a['Ename'])    # Rama Rao   
print(a['Sal']) # 1000.65

          
          
          
 #  How  to  append  key : value  pairs  to dictionary  (Home  work)
a  =  {'Empno'  :  25,  'Ename'  :  'Rama  Rao'  ,  'Sal'  :  1000.65  }
print(a)
How  to  append  'Gender' : 'M'  to  dictionary  'a'
How  to  append  'Married' :  True  to  dictionary  'a'
print(a)
          
          
 a = {'Empno': 25, 'Ename': 'Rama Rao', 'Sal': 1000.65}
Print (a)
a['Gender'] = 'M'
a['Married'] = True
print(a)  # {'Empno': 25, 'Ename': 'Rama Rao', 'Sal': 1000.65, 'Gender': 'M', 'Married': True}

          
          
# Find  outputs (Home  work)
a = { }
How  to  append  10 : 'Rama'  to  dictionary  'a'
How  to  append  20 : 'Sita'  to  dictionary  'a'
How  to  append  15 : 'Rajesh'  to  dictionary  'a'
How  to  append  18 : 'Kiran'  to  dictionary  'a'
print(a)

          
          
          
          
a = {}
a[10] = 'Rama'
a[20] = 'Sita'
a[15] = 'Rajesh'
a[18] = 'Kiran'
print(a)  # {10: 'Rama', 20: 'Sita', 15: 'Rajesh', 18: 'Kiran'}

          
          
          
#  How  to  remove  key : value  pairs  of  dictionary  (Home  work)
a =  {'Empno'  :  25,  'Ename'  :  'Rama  Rao'  ,  'Sal'  :  1000.65  }
print(a)
How  to  remove  'Sal' : 1000.65  from  dictionary  'a'
print(a)

          
          
          
a = {'Empno': 25, 'Ename': 'Rama Rao', 'Sal': 1000.65}
print(a)
a.pop('Sal')
print(a) # {'Empno': 25, 'Ename': 'Rama Rao'}

          
          
          
#  in  and  not  in  operators  (Home  work)
a =  {10 : 20 , 30 : 40 , 50 : 60 , 70 : 80}
print(30  in  a . keys()) # True 
print(60  in  a . keys()) # False 
print(60  in  a . values()) # True 
print(30  in  a . values()) # False 
print(50  in  a) # True 
print(20  in  a) # False 
print(70  not  in  a . keys())  # False 
print(40  not  in  a . values()) # False 
print(25  not  in  a) # True

          
          
          
          
          
#  What  are  the  outputs  if  input  is  {10: 'A', 20: 'B', 15: 'C' , 20 : 'D'}
a = "{10: 'A', 20: 'B', 15: 'C', 20: 'D'}"
print(a)           # {10: 'A', 20: 'B', 15: 'C', 20: 'D'}
print(type(a))     # <class 'str'>
b = {10: 'A', 20: 'D', 15: 'C'}
print(b)           # {10: 'A', 20: 'D', 15: 'C'}
print(type(b))     # <class 'dict'>

          
          
          
          
          
#  Find  outputs  (Home  work)
a = {10 : 'Rama' , 20 : 'Sita' , 15 : 'Rajesh' , 18 : 'Kiran'}
b = {10: 'Rama', 20: 'Sita', 15: 'Rajesh', 18: 'Kiran'}
print(b)   # {10: 'Rama', 20: 'Sita', 15: 'Rajesh', 18: 'Kiran'}
print(a  is  b) # False 
print(a  ==  b) True 
c = a
print(a  is   c) # True
print(a  ==  c) # True

          
          
          
#Find  outputs  (Home  work)
a = {10 : 'Rama' , 20 : 'Sita' , 15 : 'Rajesh'}
b = {18 : 'Kiran' , 14 : 'Amar' , 20  : 'Manohar'}
c = {25 : 'Ramesh' , 19 : 'Krishna' , 15 : 'Radha' , 14 : 'Srinivas'}
d={ **a, *b,**c}
print(d)       # {10, 14, 15, 18, 19, 20, 25}  (order may vary)
print(type(d)) # <class 'set'>
e = {**a , **b , **c}
print(e) # {10: 'Rama', 20: 'Manohar', 15: 'Radha',
 18: 'Kiran', 14: 'Srinivas', 25: 'Ramesh', 19: 'Krishna'}
print(type(e)) # <class 'dict'>

          
          
          
          
#  Find  outputs  (Home  work)
a = {10 : 20 , 30 : 40}
b = {30 : 50 , 10 : 60}
print(a + b) # Error 
c = {**a , **b}
print(c)   # {10: 60, 30: 50}
d = a | b
print(d)   # {10: 60, 30: 50}

          
          
'''
(Home  work)
Write  a  program  to  create  a  dictionary  with  emp  names  and  salaries

Hint:  Append  each  emp  name  and  salary  to  dictionary  'a'
'''

          
          
          
a = {}

n = int(input("Enter number of employees: "))

for i in range(n):
    name = input("Enter employee name: ")
    salary = float(input("Enter salary: "))
    a[name] = salary   

print("Employee Dictionary:", a)

          
          
          
How many Employees ? : 4
Enter Emp Name : AAA
Enter Salary : 100000
Enter Emp Name : BBB
Enter Salary : 200000
Enter Emp Name : CCC
Enter Salary : 150000
Enter Emp Name : DDD
Enter Salary : 175000
{'AAA': 100000.0, 'BBB': 200000.0, 'CCC': 150000.0, 'DDD': 175000.0}

          
          
''' (Home  work)
Write  a  program  to  convert  a  string  to  dictionary

Let  input  be   "Emp no = 25 , Emp name = Rama  Rao , sal = 10000.0 , gender = m"

What  is  the  output ?  --->  {Emp no : 25 , Emp name  :  Rama Rao , sal : 10000.0 , gender : m}

Hint :  Use  split()  method  twice
'''
          
s = "Emp no = 25 , Emp name = Rama Rao , sal = 10000.0 , gender = m"

parts = s.split(" , ")

a = {}
for item in parts:
   
    key, value = item.split(" = ", 1)   
    a[key] = value   

print(a)

          
          
# len()  function  demo  program  (Home  work)
a = {'Empno': 25, 'Ename': 'Rama Rao', 'Sal': 1000.65}
print(len(a)) # 3

b = {}
print(len(b)) # 0'''


What  does  len(dict)  do ?  --->  Returns  number  of  key : value  pairs  in  the  dictionary
'''


#  sum()  function demo  program  (Home  work)
a = {10 : 20 , 30 : 40 , 50 : 60}
print(sum(a . keys())) # 90
print(sum(a . values())) # 120
print(sum(a)) # 90
print(sum(a . items())) # Error

# max()  and  min()   functions  demo  program  (Home  work)
a = {10 : 20 , 30 : 25 , 40 : 5 , 7 : 28 , 9 : 50}
print(max(a . keys())) # 40
print(min(a . keys())) # 7
print(max(a . values())) # 50
print(min(a . values())) #  5
print(max(a . items())) #  (40,5)
print(min(a . items())) # (7,28)
print(max(a)) #  40
print(min(a)) #  7



#  dict()  function  demo program (Home  work))
a = [(10, 'Hyd'), (20, 'Sec'), (15, 'Cyb'), (20, 'Pune')]
b = dict(a)       
print(b)             # {10: 'Hyd', 20: 'Pune', 15: 'Cyb'}

c = (['R', 'Red'], ['G', 'Green'], ['B', 'Blue'], ['G', 'Gray'])
d = dict(c)          
print(d)             # {'R': 'Red', 'G': 'Gray', 'B': 'Blue'}

e = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
print(dict(e))       #  Error 

f = [[10], [20], [30]]
print(dict(f))       #  Error 

print(dict([10, 20]))#  Error 

g = [[10, [20, 30]], [40, [50, 60]], [70, [80, 90]]]
print(dict(g))            # {10: [20, 30], 40: [50, 60], 70: [80, 90]}

h = [[[10, 20], 30], [[40, 50], 60], [[70, 80], 90]]
print(dict(h))       #  Error 

i = [[(10, 20), 30], [(40, 50), 60], [(70, 80), 90]]
print(dict(i))     # {(10, 20): 30, (40, 50): 60, (70, 80): 90}



'''
dict()  function
------------------
1) What  is  the  argument  of  dict()  function ?  --->
											Nested  sequence  such  as  list  of  tuples , list  of  lists , tuple  of  tuples , tuple  of  lists,
											set  of  tuples  and  so  on

2) What  does  dict(nested-sequence)  do ?  --->  Converts  nested  sequence  to  dictionary

3) How  many  elements  can  be  in  each  inner  sequence ?  --->  Exactly  two  elements
    What  are  the  two  elements  of   each  inner  sequence ?  ---> key  and   value

4) Is  dict(sequence)  valid ?  --->  No  becoz  argument  is  not  a  nested  sequence
'''



# sorted()  function  (Home  work)
a = {10: 'Red', 20: 'Green', 15: 'Blue', 18: 'Yellow', 5: 'White'}

b = sorted(a.keys())      #  [5, 10, 15, 18, 20]
print(b)

c = sorted(a.values())    #  ['Blue', 'Green', 'Red', 'White', 'Yellow']
print(c)

d = sorted(a.items())     #  [(5, 'White'), (10, 'Red'), (15, 'Blue'), (18, 'Yellow'), (20, 'Green')]
print(d)

f = sorted(a, reverse=True) #  [20, 18, 15, 10, 5]
print(f)

print(a)            #  {10: 'Red', 20: 'Green', 15: 'Blue', 18: 'Yellow', 5: 'White'}


'''
Tricky  program
Write  a  program  to  sort  dictionary  wrt  keys  (Home  work)

1) Let  input  be   {10 : 'A' , 20 : 'B' , 15 : 'C' , 5 : 'D' , 12 : 'E'}
    What  is  the  output ?  ---> {5 : 'D' , 10 : 'A' ,  12 : 'E' ,  15 : 'C' , 20 : 'B'}

2) Both  input  and  output  are  dictionaries

3) Hint:  Use  sorted()  function
'''



a = {10: 'A', 20: 'B', 15: 'C', 5: 'D', 12: 'E'}
b = dict(sorted(a.items()))

print(b)   # {5: 'D', 10: 'A', 12: 'E', 15: 'C', 20: 'B'}



Enter  dictionary  :  {10 : 'A' , 20 : 'B' , 15 : 'C' , 5 : 'D' , 12 : 'E'}
{5: 'D', 10: 'A', 12: 'E', 15: 'C', 20: 'B'}



# clear()  method  demo  program (Home  work)
# clear() method demo program (Home work)

a = {10: 20, 30: 40, 50: 60}
print(a)          # {10: 20, 30: 40, 50: 60}

a.clear()         
print(a)          # {}

del a             
print(a)          #  Error




# copy()  method demo  program  (Home  work)

a = {'R': 'Red', 'G': 'Green', 'B': 'Blue'}
b = a.copy()          

print(b)               # {'R': 'Red', 'G': 'Green', 'B': 'Blue'}
print(a is b)          # False 
print(a == b)          # True



# keys() method demo program
a = {10: 'Hyd', 20: 'Sec', 15: 'Cyb', 18: 'Pune'}
b = a.keys()         
print(b)                 # dict_keys([10, 20, 15, 18])
print(type(b))           # <class 'dict_keys'>
for x in b:
    print(x)


'''
What  does  keys()  method  do  --->  Returns  dict_keys  object  which  has  list  of  all  the  dictionary  keys
'''



# values()  method  demo  program

a = {10: 'Hyd', 20: 'Sec', 15: 'Cyb', 18: 'Pune'}

b = a.values()          
print(b)                 #dict_values (['Hyd', 'Sec', 'Cyb', 'Pune'])
print(type(b))           # <class 'dict_values'>
for x in b:
    print(x) # Hyd
                      Sec
                      Cyb
                      Pune
  

'''
What  does  values()  method  do  --->  Returns  dict_values  object  which  has  list  of  all  the  dictionary  values
'''


# items() method demo program
a = {10: 'Hyd', 20: 'Sec', 15: 'Cyb', 18: 'Pune'}

b = a.items()                 # returns dict_items object
print(b)                      # dict_items([(10, 'Hyd'), (20, 'Sec'), (15, 'Cyb'), (18, 'Pune')])
print(type(b))                # <class 'dict_items'>
for x in b:
    print(x)                  
    print(x, y, sep=" ... ") 


'''
1) What  does  items()  method  do  --->  Returns  dict_items  object  which  has  list  of  tuples

2) What  are  the  two  elements  of  each  tuple ?  ---> (key , value)
'''


# Find  outputs (Home  work)
a = {10 : 'Hyd' , 20 : 'Sec' , 15 : 'Cyb' , 18 : 'Pune'}
for  x , y   in  a . items():
       print(x , y , sep = ' ... ') # 10 ... Hyd
20 ... Sec
15 ... Cyb
18 ... Pune
for  x , y   in  a . keys():
       print(x , y , sep = ' ... ') # Error 
for  x , y   in  a . values():
       print(x , y , sep = ' ... ') # Error 
for  x , y   in  a:
       print(x , y , sep = ' ... ') # Error





#  Find  outputs  (Home  work)
a = {10 : 'Rama' , 20 : 'Sita' , 15 : 'Rajesh'}
x, y, z = a.keys()
print(x)   # 10
print(y)   # 20
print(z)   # 15

print()
x, y, z = a.values()
print(x)   # Rama
print(y)   # Sita
print(z)   # Rajesh

print()
x, y, z = a.items()
print(x)   # (10, 'Rama')
print(y)   # (20, 'Sita')
print(z)   # (15, 'Rajesh')

print()

(rno1, sname1), (rno2, sname2), (rno3, sname3) = a.items()
print(rno1, sname1)   # 10 Rama
print(rno2, sname2)   # 20 Sita
print(rno3, sname3)   # 15 Rajesh



'''
Tricky  program
(Home  work)
Write  a program  to  determine  frequency  of  each  alphabet  in  the  string   in   alphabetical  order
(ignoring  the  case)

Let  input  be   RamA raO
What  is  the  output ?  ---> {'A' : 3 , 'M' : 1 , 'O' : 1 , 'R' : 2}  in  alphabetical  order

1) What  is  the  string  after  it  is  converted  to  uppercase ?  --->  'RAMA RAO'

2) What  is  the  result  of  sorted('RAMA RAO') ?  --->  [' ' , 'A' , 'A' , 'A' , 'M' , 'O' , 'R' , 'R']

3) What  is  dictionary  'a'  initially ?  --->  { }

4) What  is  the  first  element  in  list ?  --->  ' '
    What  action  to  be  made  for  ' ' ?  --->  Ignore  becoz  it  is  not  an  alphabet

5) What  is  the  2nd  element  in  list ?  ---> 'A'
    What  is  a['A']  ?  --->  a . get('A' , 0) + 1 = 0 + 1 = 1
    What  does  a['A']  =  1  do ?  --->  Appends  'A' : 1  to  dict  'a'
    What  is  dictionary  'a' ?  --->  {'A' : 1}

6) What  is  the  3rd  element  in  list ?  --->  'A'
    What  is  a['A']  ?  --->  a . get('A' , 0) + 1 =  1 + 1 = 2
    What  does  a['A']  =  2  do ?  --->  Modifies  value  of  'A'  to  2  in dict  'a'
    What  is  dictionary  'a' ?  --->  {'A' : 2}

7) What  is  the  4th  element  in  list ?  --->  'A'
    What  is  a['A']  ?  --->  a . get('A' , 0) + 1 =  2 + 1 = 3
    What  does  a['A'] = 3  do ?  --->  Modifies  value  of  'A'  to  3  in dict  'a'
    What  is  dictionary  'a' ?  ---> {'A' : 3}

8) What  is  the  5th  element  in  list ?  --->  'M'
     What  is  a['M']  ?  --->  	 a . get('M' , 0) + 1 =  0 + 1 = 1
    What  does  a['M'] = 1  do ?  --->  Appends  'M' : 1  to  dict  'a'
    What  is  dictionary  'a' ?  ---> {'A' : 3 , 'M' : 1}

9) What  is  the  6th  element  in  list ?  ---> 'O'
     What  is  a['O']  ?  --->  a . get('O' , 0) + 1 =  0 + 1 = 1
     What  does  a['O'] = 1  do ?  ---> Appends  'O' : 1  to  dict  'a'
     What  is  dictionary  'a' ?  --->  {'A' : 3 , 'M' : 1 , 'O' : 1}

10) What  is  the  7th  element  in  list ?  ---> 'R'
      What  is  a['R']  ?  --->  a . get('R' , 0) + 1 =  0 + 1 = 1
       What  does  a['R'] = 1  do ?  --->  Appends  'R' : 1  to  dict  'a'
	  What  is  dictionary  'a' ?  ---> {'A' : 3 , 'M' : 1 , 'O' : 1 , 'R' : 1}

11) What  is  the  last  element  in  list ?  --->  'R'
      What  is  a['R']  ?  --->  a . get('R' , 0) + 1 =  1 + 1 = 2
      What  does  a['R'] = 2  do ?  ---> Modifies  value  of  'R'  to  2  in dict  'a'
      What  is  dictionary  'a' ?  --->  	{'A' : 3 , 'M' : 1 , 'O' : 1 , 'R' : 2}

11) Finally  what   is  dict  'a' ?  ---> {'R' : 2 , 'A' : 3 , 'M' : 1 , 'O' : 1}
'''



s = "RamA raO"
s = s.upper()             
a = {}                   

for ch in sorted(s):      
    if ch.isalpha():       
        a[ch] = a.get(ch, 0) + 1   
print(a)



Enter  mixed  case  string : RamA raO
{'A': 3, 'M': 1, 'O': 1, 'R': 2}
