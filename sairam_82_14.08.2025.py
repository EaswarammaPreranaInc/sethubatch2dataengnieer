# -*- coding: utf-8 -*-
"""sairam_82_14.08.2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wdkZXrnRyQtZvRbMN1Ml1UZgwwnFPG5h
"""

#1  program  with  walrus  operator
a = 'Hyd is green city. Hyd is hitec city. Hyd is his cityi'

while (index := a.find('is', (index + 1) if 'index' in locals() else 0)) != -1:
    print(index)

print('End')

#2 index()  method  demo  program
a = 'Hyd is green city. Hyd is hitec city. Hyd is his cityi'

start = 0
try:
    while True:
        index = a.index('is', start)
        print(index)
        start = index + 1
except ValueError:
    print('End')

#3   program  with  rfind()  method
a = 'Hyd is green city. Hyd is hitec city. Hyd is his cityi'

index = a.rfind('is')
while index != -1:
    print(index)
    index = a.rfind('is', 0, index)

print('End')

#4 rindex()   method  demo  program
a = 'Hyd is green city. Hyd is hitec city. Hyd is his cityi'

try:
    index = a.rindex('is')
    while True:
        print(index)
        index = a.rindex('is', 0, index)
except ValueError:
    print('End')

#5 count()  method  demo  program (Home  work)
a = 'Hyd is green city. Hyd is hitec city. Hyd is his city'
print(a.count('is'))
print(a.count('is', 19, 48))
print(a.count('was'))

#6 Find  outputs  (Home  work)
a = 'Hyd is\tgreen\ncity.Hyd is\thitec\ncity.Hyd is\this\ncity'
print(a . count(' ')) #3
print(a . count('\t')) #3
print(a.count('\n')) #3

#7  program  to  replace  every  occurance  of  first  character  in  the  string  with  '*'  except  first  character
s = input("Enter a string: ")

first_char = s[0]
result = first_char + s[1:].replace(first_char, '*')
print(result)

#8 Find  outputs  (Home  work)
a = '15:36:48'
print(a . split(':')) #['15', '36', '48']
print(a) #15:36:48

#9 Find  outputs  (Home  work)
a = 'Hyd\nis green\tcity'
print(a.split(' '))      # ['Hyd\nis', 'green\tcity']
print(a.split())         # ['Hyd', 'is', 'green', 'city']
print(a.split('green'))  # ['Hyd\nis ', '\tcity']
print(a.split(''))       # Error:

#10 # Find  outputs  (Home  work)
a = 'Hyd	is	green	city'
print(a . split('\t')) #['Hyd', 'is', 'green', 'city']
print(a . split()) # ['Hyd', 'is', 'green', 'city']
print(a.split(' ')) #['Hyd\tis\tgreen\tcity']

#11 Find  outputs (Home  work)
a = 'Hyd   is   green   city'
print(a . split()) # ['Hyd', 'is', 'green', 'city']
print(a.split(' ')) # ['Hyd   is   green   city']

#12 Find  outputs  (Home  work)
a = 'www.gmail.com'
print(a.split('.')) #['www', 'gmail', 'com']

#13  program  to  evaluate  an  expression
a, b, c ,d = input("Enter three numbers separated by '+': ").split('+')
total = int(a) + int(b) + int(c) + int(d)
print(total)

#14 Find  outputs  (Home  work)
a = ['15', '36', '48']
print(':'.join(a))             # 15:36:48
b = ('Hyd', 'is', 'green', 'city')
print(' '.join(b))             # Hyd is green city
c = {'10', '20', '15', '25', '52'}
print(','.join(c))             # 10,20,15,25,52
d = ['www', 'gmail', 'com']
print('.'.join(d))             # www.gmail.com
e = [15, 36, 48]
print(':'.join(e))             # Error
f = ['Sankar', 'Dayal', 'Sarma']
print(''.join(f))              # SankarDayalSarma
g = range(5)
print('-'.join(g))             # Error

#15 endswith()  method  demo  progrram (Home  work)
a = 'Hyd is green city'
print(a.endswith('city'))          # True
print(a.endswith('town'))          # False
print(a.endswith('green', 3, 12))  # True
print(a.endswith('green', 3, 13))  # False
print(a.endswith(' ', 3, 13))      # True

#16 program  to  append  'ing'  to  input  string.
s = input("Enter a string: ")
if len(s) < 3:
    result = s
elif s.endswith("ing"):
    result = s + "ly"
else:
    result = s + "ing"
print(result)

#17 isalpha()  method  demo  program (Home  work)
print('Hyd'  . isalpha())  #   True
print('Rama  Rao'  . isalpha()) #   False
print('Hyd4'  . isalpha()) #False
print('Hyd$'  . isalpha()) #False
print('9247'  .  isalpha())#False
print('+-$'    .  isalpha()) #False
print('A2#'  .   isalpha()) #False
print(''  .  isalpha()) #False
print(' '  .  isalpha()) #False

#18 isdigit()  method  demo  program  (Home  work)
print('9247' . isdigit())  # True
print('92a47' . isdigit())  # False
print('92$47' . isdigit()) #False
print('Hyd' . isdigit()) #False
print('+-$' . isdigit()) #False
print('A2#' . isdigit()) #False
print('' . isdigit()) #False
print(' ' . isdigit()) #False
print(9247 . isdigit())#Error

#19 isupper()  method  demo  program  (Home  work)
print('HYd' . isupper())  #   False
print('HYD' . isupper()) #   True
print('9247' . isupper())  #   False
print('RAMA  RAO' . isupper()) #True
print('+-$' . isupper()) #False
print('HYD123' . isupper()) #True
print('HYD+-$' . isupper()) #True
print('' . isupper()) #False
print('A2#' . isupper()) #True

#20 islower()  method  demo  program  (Home  work)
print('hyD' . islower())  #  False
print('hyd' . islower())  #  True
print('9247' . islower())  #  False
print('rama  rao' . islower()) #True
print('+-$' . islower()) #False
print('hyd+-$' . islower()) #True
print('abc123' . islower()) #True
print('' . islower()) #False
print('a2#' . islower()) #True

#21 isalnum()  method  demo  program  (Home  work)
print('A7$g'  . isalnum())  #  False
print('HYD' . isalnum())  #  True
print('+-$' . isalnum()) #False
print('hyd' . isalnum()) #True
print('hYd' . isalnum()) #True
print('9247' . isalnum()) #True
print('' . isalnum()) #False
print('A7g9'  . isalnum()) #True

#22 isspace()  method  demo  program  (Home  work)
print('\n  A\t' . isspace())  #  False
print('\n  \t' . isspace()) #  True
print('\n  7\t' . isspace()) #False
print('\n' . isspace()) #True
print('\n  $\t' . isspace()) #False
print('\t' . isspace()) #True
print('' . isspace()) #False
print(' ' . isspace()) #True

#23 Find  outputs  (Home  work)
a, b, c = 25, 10.8, 'Hyd'
print('a : {} \t b : {} \t c : {} '.format(a, b, c)) # a:25 b:10.8 c:Hyd
print('a : {0} \t b : {1} \t c : {2} '.format(a, b, c)) # a:25 b:10.8 c : Hyd
print('a : {2} \t b : {1} \t c : {0} '.format(a, b, c)) # a:Hyd b:10.8 c:25
print('a : {2} \t b : {2} \t c : {2} '.format(a, b, c)) #a:Hyd b:Hyd c:Hyd
print('a : {x} \t b : {y} \t c : {z} '.format(x=a, y=b, z=c))#a:25 b:10.8 c:Hyd
print('a : {x} \t b : {y} \t c : {z} '.format(z=a, y=b, x=c))# a:Hyd b:10.8 c : 25
print('a : {z} \t b : {z} \t c : {z} '.format(z=a, y=b, x=c))# a:25 b:25 c:25

#24 program  to  determine  user  input  is  alphabet , digit , white space  or  special  character
ch = input("Enter a character: ")
if len(ch) == 0:
    print("White space")
elif ch.isalnum():
    print("Alphanumeric character")
    if ch.isalpha():
        print("Alphabet character")
        if ch.isupper():
            print("Upper case alphabet")
        else:
            print("Lower case alphabet")
    elif ch.isdigit():
        print("Digit character")
elif ch.isspace():
    print("White space")
else:
    print("Special character")

#25 program to reverse a string without slice
s = input("Enter a string: ")
b = ''
for i in range(1, len(s) + 1):
    b = b + s[-i]
print(b)

#26 program  to  reverse  order  of  words  in  the  sentence  without  slice
s = input("Enter a sentence: ")
b = s.split()
c = ''
for i in range(1, len(b) + 1):
    c = c + b[-i] + ' '
print(c.strip())

#27 program  to  reverse  each  word  of  the  sentence
s = input("Enter a sentence: ")
for word in s.split():
    print(word[::-1], end=' ')

#28 program  to  sort  string  in  alphabetical  order
s = input("Enter a string: ")
sorted_s = ''.join(sorted(s))
print(sorted_s)

#29 program  to  sort  string  such  that  alphabets  in  alphabetical  order  and  digits  in  ascending  order
s = input("Enter a string: ")
alpha = ''
digit = ''
for ch in sorted(s):
    if ch.isalpha():
        alpha += ch
    elif ch.isdigit():
        digit += ch
result = alpha + digit
print(result)