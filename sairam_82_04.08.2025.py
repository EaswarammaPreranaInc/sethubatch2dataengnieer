# -*- coding: utf-8 -*-
"""04-08-2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/173i6ScJwUPBRr94faSqDRHddy4D9beXH
"""

#1) Find  outputs  (Home  work)
for i in range(1, 8):
    print(i)              # 1, 2, 3, 4, 5, 6, 7
    if i % 3 == 0:
        continue
    else:
        print('Sec')      # 1: Sec, 2: Sec, 4: Sec, 5: Sec, 7: Sec
    print('Hello')        # 1: Hello, 2: Hello, 4: Hello, 5: Hello, 7: Hello
# End of loop
print('Outside loop')     # Outside loop

#2) Identify Error  (Home  work)
if ():             #condition needed
    print('Hyd')
    continue       #continue can only be used inside a loop
    print('Sec')

#3) Find outputs (Home  work)
for i in range(1, 8):
    print(i)              # 1, 2, 3
    if i % 3 == 0:
        break            # loop breaks when i is 3
    else:
        print('Sec')     # 1: Sec, 2: Sec
    print('Hello')       # 1: Hello, 2: Hello

# End of the loop
print('Outside loop')     # Outside loop

#4) Identify Error  (Home  work)
if (10, 20, 30):         # Works but probably wrong idea (tuple is always True)
    print('Hyd')
    break                # Error: 'break' only works inside loops
print('Sec')

#5) Find  outputs  (Home  work)
for i in range(1, 8):
    print(i)              # 1, 2, 3, 4, 5, 6, 7
    if i % 3 == 0:
        pass              # do nothing when i is 3 or 6
        print('Hyd')      # 3: Hyd, 6: Hyd
    else:
        print('Sec')      # 1: Sec, 2: Sec, 4: Sec, 5: Sec, 7: Sec
    print('Hello')        # 1: Hello, 2: Hello, 3: Hello, 4: Hello, 5: Hello, 6: Hello, 7: Hello

# End of the loop
print('Outside loop')     # Outside loop

#6) Find  outputs  (Home  work)
for i in range(1, 8):
    print(i)              # Prints 1 to 7
    if i % 3 == 0:
        pass              # Does nothing when i is multiple of 3
        print('Hyd')      # Prints 'Hyd' for multiples of 3
    else:
        print('Sec')      # Prints 'Sec' for non-multiples of 3
    print('Hello')        # Prints 'Hello' every iteration

# End of the loop
print('Outside loop')     # Prints 'Outside loop'

#7) Find  outputs  (Home  work)
for i in range(1, 8):
    print(i)              # 1, 2, 3 (loop stops at 3)
    if i % 3 == 0:
        exit()            # Program exits when i is 3, no further output
    else:
        print('Sec')      # 1: Sec, 2: Sec
    print('Hello')        # 1: Hello, 2: Hello

# End of the loop
print('Outside loop')     # This will NOT be printed because program exited inside loop

#8) Find  outputs  (Home  work)
for i in range(1, 8):
    print(i)                  # 1, 2, 3, 4, 5, 6, 7
    if i % 3 == 0:
        continue             # skip to next when i=3,6
    else:
        print('Sec')         # 1: Sec, 2: Sec, 4: Sec, 5: Sec, 7: Sec
        print('Hello')       # 1: Hello, 2: Hello, 4: Hello, 5: Hello, 7: Hello
# End of loop
print('Outside loop')         # Outside loop

#9) Find  outputs  (Home  work)
for i in range(1, 8):
    print(i)              # 1, 2, 3
    if i % 3 == 0:
        break            # loop breaks when i is 3
    else:
        print('Sec')     # 1: Sec, 2: Sec
        print('Hello')   # 1: Hello, 2: Hello
else:
    print('else suite')  # This will NOT run because of the break

# End of the loop
print('Outside loop')     # Outside loop

#10) # Find  outputs  (Home  work)
for i in range(1, 8):
    print(i)              # 1 to 7
    if i == 8:
        break            # This condition never true, so break never triggered
    else:
        print('Sec')     # Printed for every i from 1 to 7
        print('Hello')   # Printed for every i from 1 to 7
else:
    print('else suite')  # Executes because loop did NOT break

# End of the loop
print('Outside loop')     # Printed after the loop ends

#11) program to search for an element in the list
lst = [10, 20, 15, 12, 18]
x = int(input("Enter element to search: "))

found = False
for i in range(len(lst)):
    if lst[i] == x:
        print(f"Found at index {i}")
        found = True
        break

if not found:
    print("Not found")

#12) program  to  search  for  an  element  in  the  list  and  print  index  of  each  element
lst = [10, 20, 15, 12, 18, 15, 19, 14, 15, 14]
x = int(input("Enter element to search: "))

count = 0
for i in range(len(lst)):
    if lst[i] == x:
        print(f"{x} is found at index {i}")
        count += 1

print(f"{x} is found {count} times")

#13) Walrus   operator (:=)  demo  program
print(a := 25)       # 25
print(a = 25)        # Error
print(a)             # Prints current value of 'a'
print(a := 6 + 7)    # 13
print(a)             # 13
print((a := 6) + 7)  # 13
print(a)             # 6
print((a = 6) + 7)   # Error

#14) # Find  outputs  (Home  work)
a = 0
if a == 0:
    print('Hyd')          # 'Hyd'
else:
    print('Sec')

if b := 0:
    print('Hyd')
else:
    print('Sec :', b)     # 'Sec : 0'

#15) program to  determine  average  of  inputs  which  are  terminated  with  ctrl + z

a = 0
b = 0

while True:
    try:
        value = input("Enter a number (Ctrl+Z to stop): ")
        a += float(value)
        b += 1
    except EOFError:
        break

if b > 0:
    avg = a / b
    print("Average is", avg)
else:
    print("No inputs were given")

#16) del  operator  demo program  (Home  work)

a = 25
print(a)   # Prints 25
del a
print(a)   # Error: NameError because 'a' is deleted and no longer defined

#17) Find  outputs  (Home  work)
a = b = c = 25
print(a, b, c)    # 25 25 25

del a
print(b, c)       # 25 25

print(a)          # Error

del b
print(c)          # 25

print(b)          # Error

del c
print(c)          # Error

#18) Can  multiple  objects  be  deleted  with  same  del  operator ?
a, b, c = 25, 10.8, 'Hyd'
print(a, b, c)        # 25 10.8 Hyd

del a, b, c           # Deletes all three variables

print(a)              # Error
print(b)              # Error
print(c)              # Error

#19) Find outputs  (Home  work)

a = [10, 20, 15, 18]
print(a)            # [10, 20, 15, 18]

del a[2]            # Delete element at index 2 (which is 15)
print(a)            # [10, 20, 18]

del a               # Delete the entire list variable 'a'

print(a)            # Error
print(a[0])         # Error

#20) Find outputs  (Home  work)
a = (10, 20, 15, 18)
print(a)          # (10, 20, 15, 18)
print(a[0])       # 10

del a[2]          # Error
del a             # Deletes entire tuple variable 'a'

print(a)          # Error
print(a[0])       # Error