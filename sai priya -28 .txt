# ================= Program-1: Frequency of vowels =================
s = "RamA raO"
s = s.upper()
vowels = "AEIOU"
freq = {}
for ch in vowels:
    count = s.count(ch)
    if count > 0:
        freq[ch] = count
print("Program-1 Output:", freq)

# ================= Program-2: Dictionary update with list of tuples =================
a = [('R', 'Red'), ('G', 'Green'), ('B', 'Blue')]
b = {'Y': 'Yellow', 'G': 'Gray'}
b.update(a)
print("Program-2 Output:", b)

# ================= Program-3: Dictionary update with tuples =================
a = [(10, 20, 30), (40, 50, 60), (70, 80, 90)]
b = {}
b.update(a)
print("Program-3 Output (till error):", b)
c = [(10,), (20,), (30,)]
try:
    b.update(c)
    print("Program-3 Output:", b)
except Exception as e:
    print("Program-3 Error:", e)

# ================= Program-4: Dictionary comprehensions =================
d = {x: x ** 3 for x in range(5)}
print("Program-4a Output:", d, type(d))
d = {x: 2 * x for x in range(5)}
print("Program-4b Output:", d)

# ================= Program-5: Filtering dictionary =================
a = {10: 'Rama', 15: 'Sita', 18: 'Rajesh', 17: 'Kiran', 12: 'Rama Rao'}
b = {k: v for k, v in a.items() if k % 2 != 0}
print("Program-5a Output:", b)
c = {k: a[k] for k in a if a[k].startswith('R')}
print("Program-5b Output:", c)

# ================= Program-6: Function without return =================
def f1():
    print('Hyd')
    print('Sec')
    print('Cyb')

print("Program-6 Output:")
print("Begin")
x = f1()
print(x)
print(type(x))
print("End")

# ================= Program-7: Function returning tuple =================
def f1():
    return 10, 20, 30
print("Program-7 Output:")
x = f1()
print(x, type(x))
a, b, c = f1()
print(a, b, c)
print("for loop")
for k in f1():
    print(k)

# ================= Program-8: Multiple return statements =================
def f1():
    return 10
    return 20
    return 30
print("Program-8 Output:")
print("Begin")
x = f1()
print(x)
print("End")

# ================= Program-9: Function before definition =================
print("Program-9 Output:")
try:
    f1()
    def f1():
        print("Hello")
    print(f1())
    print(f1)
except Exception as e:
    print("Error:", e)

# ================= Program-10: Function printing =================
print("Program-10 Output:")
print("Hello")
def f1():
    print("f1 function")
print("Hi")
print(f1())
print(f1)
print("Bye")

# ================= Program-11: Function type and id =================
def f1():
    print("Hyd")
    print("Sec")
    print("Cyb")
print("Program-11 Output:")
print("Begin")
print(type(f1))
print(id(f1))
print("End")

# ================= Program-12: add() with different datatypes =================
def add(a, b):
    return a + b
print("Program-12 Output:")
print(add(10, 20))
print(add("Hyder", "abad"))
print(add(10.8, 20.6))
print(add(True, False))
print(add(3 + 4j, 5 + 6j))
print(add(25, 10.8))
print(add([25, 10.8, "Hyd"], [True, None, 3+4j, "Sec"]))
try:
    print(add(10, "20"))
except Exception as e:
    print("Error:", e)

# ================= Program-13: Function overloading =================
def f1():
    print("No-argument function")
def f1(x):
    print("Single argument function :", x)
def f1(x, y):
    print("Two argument function :", x, y)
def f1(x, y, z):
    print("Three argument function :", x, y, z)
print("Program-13 Output:")
f1(10, 20, 30)
try:
    f1(40, 50)
except Exception as e:
    print("Error:", e)
try:
    f1(60)
except Exception as e:
    print("Error:", e)
try:
    f1()
except Exception as e:
    print("Error:", e)

# ================= Program-14: Prime number checking =================
def prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True
print("Program-14 Output:")
print(prime(25))
print(prime(11))

# ================= Program-15: Display employee details =================
def disp(empno, ename, sal):
    print(F'Emp Number : {empno} \t Emp Name : {ename} \t Salary : {sal}')
print("Program-15 Output:")
disp(25, "Rama Rao", 10000.0)
disp("Sita", 20000.0, 35)
